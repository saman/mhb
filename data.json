{
     "1": {
          "chapter": "1",
          "title": "Description of Programme Master Computer Science",
          "page": 4,
          "count": 0,
          "children": [
               {
                    "chapter": "1.1",
                    "title": "Scheme for Module Descriptions",
                    "page": 4,
                    "count": 1,
                    "text": "Description of Programme Master\nComputer Science\n\nThe goal of the 4-semester Master in Computer Science program is to deepen the knowledge students acquired\nin a Bachelor’s program by providing specialized knowledge in one or several ﬁelds of computer science. The\nMaster’s program requires that one out of ﬁve areas is selected as a focus area. The students must complete\nat least 3 modules (of 6 ECTS each) in this focus area and must write their thesis in the focus are. Students\nmust choose at least one module from a diﬀerent area. Master’s students must also participate in a project\ngroup (20 ECTS). This is a well-established 2-semester type of course in which a team cooperates together\non a relevant research topic. Other than that students are free to organize their studies.\n\n1.1 Scheme for Module Descriptions\n\nThe module descriptions are consistently structured according to the following scheme:\n\nModule name                <Name of the module>\n\nCourses                    <List of courses in the module (incl. page references)>\nModule type                <Mandatory or elective module>\nModule advisor             <Person responsible for the module>\nLanguage                   <Teaching language for the module>\nImplementation method      <Lectures, exercises, labs, seminars>\nContact hours (per week &  <Total weekly contact hours for the module >\nsemester)\nCredits ECTS               <Total credit points for the module>\nWork load                  <Total workload (ECTS), split into contact times and times for self-study. One\n                           weekly contact hour amounts to 60 minutes.>\nLearning objectives        <Short summary of the main learning objectives of the module>\nAssessment modalities      <Written exam, oral exam or other examination modalities>\nRemarks\n\n                           4"
               },
               {
                    "chapter": "1.2",
                    "title": "Scheme for Module Descriptions",
                    "page": 5,
                    "count": 1,
                    "text": "1.2 Scheme for Module Descriptions\n\nThe course descriptions are consistently structured according to the following scheme:\n\nCourse                     <Title of the course>\nCoordination               <Lecturer>\nTeaching Unit              <Institute oﬀering the course>\nLanguage                   <Teaching language>\n\nType                       <Contact times in weekly hours and organisational form (lecture, exerices,\n                           seminar, lab, project)>\n\nWork load                  <Total workload (ECTS), split into contact times and times for self-study.>\nCourse homepage            <Web page of the course, the lecturer or the institute>\nIntended semester          <Winter or summer semester>\n\nModules using this course  <Modules containing this course (incl. page references)>\n\n Short description\n<Short summary of the contents and learning objectives>\n Content\n<Main contents of the course>\n Learning objectives, competences\n<Gained knowledge, skills and competencies>\n Implementation\n<Social forms and didactical-methodical practices used in the course>\n Recommended knowledge\n<The prerequisites are recommendations rather than requirements to be checked>\n Assessment modalitites\n<Assessment forms (e.g., written exam, oral exam, presentation, homework, project, lab attestation)>\n Teaching material, literature\n\nComments"
               },
               {
                    "chapter": "1.3",
                    "title": "List of organization forms",
                    "page": 6,
                    "count": 0
               },
               {
                    "chapter": "1.4",
                    "title": "List of examination forms",
                    "page": 6,
                    "count": 1,
                    "text": "1.3 List of organization forms\n\nThe following organization forms are used in this program:\n\nFinal thesis\nLab work\nLecture with practical assignments\nLectures, seminars, projects\nSeminar\n\n1.4 List of examination forms\n\nThe following examination forms are used in this program:\nExam in general studies\nFinal thesis\nOral exam\nOral exam with course achievement Oral exam with course achievement, e.g. homework\nPartial modul exam (100 % of module grade)\nPresentation (45-60 minutes) and essay A seminar presentation should have a duration of 45 minutes\nand be based on a seminar paper."
               }
          ]
     },
     "2": {
          "chapter": "2",
          "title": "Focus Areas",
          "page": 7,
          "count": 1,
          "children": [
               {
                    "chapter": "2.1",
                    "title": "Algorithm Design",
                    "page": 8,
                    "count": 1,
                    "text": "2.1 Algorithm Design\n\nFocus Area              Algorithm Design\nKoordination\n                         Prof. Dr. rer. nat. Johannes Bl¨omer\nIncluded Modules        Codes and Cryptography\n                        Computer Science\n\n                        • Advanced Algorithms (S. 17)\n                        • Advanced Complexity Theory (S. 21)\n                        • Advanced Distributed Algorithms and Data Structures (S. 25)\n                        • Algorithmic Game Theory (S. 29)\n                        • Algorithms for Highly Complex Virtual Scenes (S. 31)\n                        • Clustering Algorithms (S. 41)\n                        • Computational Geometry (S. 45)\n                        • Foundations of Cryptography (S. 55)\n                        • Linear and Integer Optimization (S. 74)\n                        • Public-Key Cryptography (S. 101)\n                        • Routing and Data Management in Networks (S. 105)\n\nDescription\n\nIn this focus area students can concentrate on studying the\n• important techniques for the design of eﬃcient algorithms\n• application areas for the design of eﬃcient algorithms, i.e. computer graphics, networks, big data, . . .\n• limits for the design of eﬃcient algorithms, i.e. complexity theory\n• constructive use of complexity theory in cryptography and security\n• connection between eﬃcient algorithms and veriﬁcation and software design"
               },
               {
                    "chapter": "2.2",
                    "title": "Computer Systems",
                    "page": 9,
                    "count": 1,
                    "text": "2.2 Computer Systems\n\nFocus Area              Computer Systems\nKoordination\n                         Prof. Dr. Marco Platzner\nIncluded Modules        Computer Engineering\n                        Computer Science\n\n                        • Adaptive Hardware and Systems (S. 15)\n                        • Advanced Computer Architecture (S. 23)\n                        • Algorithms for Synthesis and Optimization of Integrated Circuits (S. 33)\n                        • Architectures of Parallel Computer Systems (S. 35)\n                        • Empiric performance evaluation (S. 53)\n                        • Hardware/Software Codesign (S. 64)\n                        • High-Performance Computing (S. 66)\n                        • Intelligence in Embedded Systems (S. 68)\n                        • Reconﬁgurable Computing (S. 103)\n                        • VLSI Testing (S. 121)\n\nDescription\n\nThe focus area ”Computer systems” goes into technical depths of various aspects of modern computer\nsystems. Main topics are the analysis and evaluation of computer architectures, systematic methods for\ndesign and optimisation of computer systems, in particular the interplay of hardware and software, and\nprogramming models and methods for parallel and specialised computer architectures, which are increasingly\ngaining importance."
               },
               {
                    "chapter": "2.3",
                    "title": "Intelligence and Data",
                    "page": 10,
                    "count": 1,
                    "text": "2.3 Intelligence and Data\n\nFocus Area              Intelligence and Data\nKoordination             Prof. Dr. Eyke Hu¨llermeier\n                        Intelligent Systems\nIncluded Modules        Computer Science\n\n                        • Adaptive Hardware and Systems (S. 15)\n                        • Clustering Algorithms (S. 41)\n                        • Intelligence in Embedded Systems (S. 68)\n                        • Interactive Data Visualization (S. 70)\n                        • Logic Programming for Artiﬁcial Intelligence (S. 78)\n                        • Logic and Automated Reasoning (S. 76)\n                        • Machine Learning I (S. 80)\n                        • Machine Learning II (S. 82)\n                        • Planning and Heuristic Search (S. 97)\n\nDescription\n\nIntelligent systems are computer systems the behavior of which is controlled by methods and algorithms\nfrom artiﬁcial intelligence (AI). Systems of that kind are becoming increasingly important, not only on a\nscientiﬁc level but also in a social context: Autonomous or semi-autonomous systems such as service robots,\nself-driving cars or medical diagnosis systems will have a deep impact on our future private and professional\nlife. In addition to methodological advances and improved hardware, the ”data explosion” can be seen\nas a main driving factor for the rapid development of AI-systems during the last decade: Thanks to the\navailability of massive amounts of data or sensory feedback from their environment, intelligent systems are\nable to automatically improve their behavior through adaptation and learning.\nThis focus area covers important aspects of intelligent systems design and conveys corresponding theoret-\nical and methodological foundations. This includes lectures on machine learning and data analysis, data\nmanagement, computer graphical and visual data analysis, as well as swarm intelligence and robotics."
               },
               {
                    "chapter": "2.4",
                    "title": "Networks and Communication",
                    "page": 11,
                    "count": 1,
                    "text": "2.4 Networks and Communication\n\nFocus Area              Networks and Communication\nKoordination             Prof. Dr. rer. nat. Holger Karl\n                        Computer Networks\nIncluded Modules        Computer Science\n\n                        • Advanced Distributed Algorithms and Data Structures (S. 25)\n                        • Bitcoins, Cryptocurrencies, and Privacy-Enhancing Technologies (S. 37)\n                        • Empiric performance evaluation (S. 53)\n                        • Future Internet (S. 60)\n                        • Mobile Communication (S. 86)\n                        • Network Simulation (S. 93)\n                        • Networked Embedded Systems (S. 95)\n                        • Routing and Data Management in Networks (S. 105)\n                        • Vehicular Networking (S. 119)\n\nDescription\n\nThe focus area “Networks and Communication” teaches architectures, methods and systems of modern\ncommunication technology. To this end, we investigate methods of various abstractions levels, starting from\nthe lowest level physical transmissions up to and including application design in distributed environments.\nDiﬀerent types of systems are considered, ranging from conventional mobile communication over ad hoc\nnetworks and vehicular communication systems to networking in data centers and architectures for the\nfuture Internet at large. In doing so, we strive to build the bridge to aspects of distributed systems design.\nQuestions on architecture design and options for protocol designs are complemented by the evaluation of\nsuch systems. To answer those questions, we introduce experimental and statistical performance evaluation\ntechniques."
               },
               {
                    "chapter": "2.5",
                    "title": "Software Engineering",
                    "page": 12,
                    "count": 2,
                    "text": "2.5 Software Engineering\n\nFocus Area              Software Engineering\nKoordination\n                         Prof. Dr. Gregor Engels\nIncluded Modules        Database and Information Systems\n                        Computer Science\n\n                        • Advanced Compiler Construction (S. 19)\n                        • Advanced Software Engineering: Methods, Architectures, Industrial Ap-\n                        plications (S. 27)\n                        • Build It, Break It, Fix It (S. 39)\n                        • Compiler Construction (S. 43)\n                        • Deductive Veriﬁcation (S. 49)\n                        • Designing code analyses for large-scale software systems (S. 51)\n                        • Empiric performance evaluation (S. 53)\n                        • Fundamentals of Model-Driven Engineering (S. 57)\n                        • High-Performance Computing (S. 66)\n                        • Contextual Informatics (S. 47)\n                        • Language-Based Security (S. 72)\n                        • Logic Programming for Artiﬁcial Intelligence (S. 78)\n                        • Model Checking (S. 88)\n                        • Model-Based Interface Development (S. 90)\n                        • Software Analysis (S. 111)\n                        • Software Quality Assurance (S. 113)\n                        • Type Systems for Correctness and Security (S. 115)\n                        • Usability Engineering Practice (S. 117)\n\nDescription\n\nIn this focus area, students can concentrate on studying concepts, languages, methods, techniques, and tools\nfor the systematic development of software systems. These comprise\n• constructive techniques for developing functional and non-functional aspects of a system,\n• formal and informal analytical techniques to ensure high quality of a system,\n• systematic techniques to enable situation-speciﬁc process models"
               }
          ]
     },
     "3": {
          "chapter": "3",
          "title": "Modules",
          "page": 14,
          "count": 1,
          "children": [
               {
                    "chapter": "3.1",
                    "title": "Adaptive Hardware and Systems",
                    "page": 15,
                    "type": "Elective Module",
                    "count": 2,
                    "items": {
                         "module_name": "Adaptive Hardware and Systems / Adaptive Hardware and Systems",
                         "workload": "180 h",
                         "credits": "6 LP",
                         "semester": "• Adaptive Hardware and Systems : arbitrary",
                         "course_teaching_form": "Adaptive Hardware and Systems: Lecture ( 45h / 105h / EN / SS / 25 ) Adaptive Hardware and Systems: Tutorial ( 30h / 0h / EN / SS / 25 )",
                         "choices_in_module": "none",
                         "course_prerequiites": "none",
                         "recommended_proﬁciencies": "Adaptive Hardware and Systems: Basic knowledge in computer architectures and programming lan- guages",
                         "content": "Adaptive Hardware and Systems: Adaptation reﬂects the capability of a system to maintain or improve its performance in the context of internal or external changes, changes in the operational environment, incidental or intentional interference, or trade-oﬀs between performance requirements and available resources. This lecture focuses on adaptive hardware systems. After a short introduction to analog and digital reconﬁgurable hardware the lecture focuses on algorithms from the Computational Intelligence (CI) domain for the implementation of the adaptation and optimization mechanisms. The labs include the implementation of learning strategies for run-time adaptable hardware signal classiﬁers, evolution of adaptable processor caches, and optimization of chip designs.",
                         "learning_objectives": "",
                         "implementation_method": "Adaptive Hardware and Systems: • Lecture with projected slides and notes on blackboard • Interactive assignments in lecture room • Self-study and discussion of scientiﬁc publications • Programming exercises • Solving of parallel optimization challenges on the PC2 compute cluster",
                         "assessment_modalities": "Oral exam (ca. 40 Minutes) The responsible lecturer announces type and duration of assessment modalities in the ﬁrst three weeks of the lecture period at latest.",
                         "partial_module_exams": "none",
                         "course_achievement": "Studienleistung: written exercises The responsible lecturer announces the requirements for course achievements in the ﬁrst three weeks of the lecture period at latest.",
                         "prerequisites_for_participation_in_module_exam": "Passing of course achievement.",
                         "prerequisites_for_obtaining_credits": "Passing of module exam.",
                         "weight_for_overall_grade": "The module is weighted with 6 credits.",
                         "person_responsible_for_the_module": "Dr. Paul Kaufmann",
                         "learning_material,_literature": "Adaptive Hardware and Systems: Folien; ausgewa¨hlte Fachartikel; Lehrbu¨cher • Weicker, Karsten, ”Evolution¨are Algorithmen”, Springer, 2007. ISBN 978-3-8351-9203-4 • Kruse et al.: ”Computational Intelligence - A Methodological Introduction”, Springer, 2013. ISBN 978-1-4471-5012-1 • Kruse et al.: ”Computational Intelligence [DE]”, Vieweg+Teubner-Verlag, Wiesbaden, 2011. ISBN 978-3-8348-1275-9 • Wang et al.: ”Electronic Design Automation”, Morgan Kaufmann, 2009. ISBN: 0-1237-4364-8",
                         "remarks": "none"
                    }
               },
               {
                    "chapter": "3.2",
                    "title": "Advanced Algorithms",
                    "page": 17,
                    "type": "Elective Module",
                    "count": 2,
                    "items": {
                         "module_name": "Advanced Algorithms / Advanced Algorithms",
                         "workload": "180 h",
                         "credits": "6 LP",
                         "semester": "• Advanced Algorithms : arbitrary",
                         "course_teaching_form": "Advanced Algorithms: Lecture ( 45h / 105h / EN / WS / 50 ) Advanced Algorithms: Tutorial ( 30h / 0h / EN / WS / 25 )",
                         "choices_in_module": "none",
                         "course_prerequiites": "none",
                         "recommended_proﬁciencies": "Advanced Algorithms: Willingness and ability to learn the creative process of algorithm design and eﬃciency analysis using mathematical methods. Basic Knowledge of some basic algorithms and data structures and their analyses is assumed.",
                         "content": "Advanced Algorithms: This course presents advanced algorithms and algorithmic paradigms for basic problems. In particular, methods such as randomization and derandomization, as well as the concepts of approximation and online algorithms, are presented using important algorithmic problems. In all cases, proof of correctness and run-time analyzes are carried out.",
                         "learning_objectives": "Students apply advanced algorithmic design methods such as randomization, approximation, and online algorithms to new problems and analyze them using combinatorial and probabilistic methods.",
                         "implementation_method": "Advanced Algorithms: • Lecture with beamer and blackboard. • Exercises in small groups. • expected student activities: active participation in exercises, homework. • Exercise sheets, solutions are presented and discussed in tutorials. • In exercises and homework, design and analysis of algorithms are practiced on selected examples.",
                         "assessment_modalities": "Oral exam (ca. 40 Minutes) The responsible lecturer announces type and duration of assessment modalities in the ﬁrst three weeks of the lecture period at latest.",
                         "partial_module_exams": "none",
                         "course_achievement": "Studienleistung: written exercises The responsible lecturer announces the requirements for course achievements in the ﬁrst three weeks of the lecture period at latest.",
                         "prerequisites_for_participation_in_module_exam": "Passing of course achievement.",
                         "prerequisites_for_obtaining_credits": "Passing of module exam.",
                         "weight_for_overall_grade": "The module is weighted with 6 credits.",
                         "person_responsible_for_the_module": "Prof. Dr. Friedhelm Meyer auf der Heide",
                         "learning_material,_literature": "Advanced Algorithms: Standardlehrbu¨cher, Foliensatz der Vorlesung, U¨ bungsbl¨atter",
                         "remarks": "none"
                    }
               },
               {
                    "chapter": "3.3",
                    "title": "Advanced Compiler Construction",
                    "page": 19,
                    "type": "Elective Module",
                    "count": 2,
                    "items": {
                         "module_name": "Advanced Compiler Construction / Advanced Compiler Construction",
                         "workload": "180 h",
                         "credits": "6 LP",
                         "semester": "• Advanced Compiler Construction : arbitrary",
                         "course_teaching_form": "Advanced Compiler Construction: Lecture ( 45h / 105h / EN / WS / 25 ) Advanced Compiler Construction: Tutorial ( 30h / 0h / EN / WS / 25 )",
                         "choices_in_module": "none",
                         "course_prerequiites": "none",
                         "recommended_proﬁciencies": "Advanced Compiler Construction:",
                         "content": "Advanced Compiler Construction: The goal of this course is to present advanced optimization and security techniques in compilers.",
                         "learning_objectives": "",
                         "implementation_method": "Advanced Compiler Construction:",
                         "assessment_modalities": "Oral exam (ca. 40 Minutes) The responsible lecturer announces type and duration of assessment modalities in the ﬁrst three weeks of the lecture period at latest.",
                         "partial_module_exams": "none",
                         "course_achievement": "Studienleistung: written exercises The responsible lecturer announces the requirements for course achievements in the ﬁrst three weeks of the lecture period at latest.",
                         "prerequisites_for_participation_in_module_exam": "Passing of course achievement.",
                         "prerequisites_for_obtaining_credits": "Passing of module exam.",
                         "weight_for_overall_grade": "The module is weighted with 6 credits.",
                         "person_responsible_for_the_module": "Prof.Dr. Stefan Brunthaler",
                         "learning_material,_literature": "Advanced Compiler Construction: none",
                         "remarks": "none"
                    }
               },
               {
                    "chapter": "3.4",
                    "title": "Advanced Complexity Theory",
                    "page": 21,
                    "type": "Elective Module",
                    "count": 2,
                    "items": {
                         "module_name": "Advanced Complexity Theory / Advanced Complexity Theory",
                         "workload": "180 h",
                         "credits": "6 LP",
                         "semester": "• Advanced Complexity Theory : arbitrary",
                         "course_teaching_form": "Advanced Complexity Theory: Lecture ( 45h / 105h / EN / WS oder SS / 25 ) Advanced Complexity Theory: Tutorial ( 30h / 0h / EN / WS oder SS / 25 )",
                         "choices_in_module": "none",
                         "course_prerequiites": "none",
                         "recommended_proﬁciencies": "Advanced Complexity Theory: Basic knowledge about complexity theory (e.g., Turing machines, NP- completeness)",
                         "content": "Advanced Complexity Theory: Complexity Theory deals with determining the amount of resources (e.g. runtime, memory consumption) necessary and suﬃcient for solving a given algorithmic problem (e.g. Travelling Salesperson Problem (TSP)) on a given machine model (e.g. Turing machine). One approach is to deﬁne complexity classes like P, NP, PSPACE, in order to classify problem complexity by means of completeness in such classes, like the famous class of NP-complete problems. This gives conditional results like ”‘If NP is not equal P, then TSP is not solvable in polynomial time.”’ This branch of Complexity Theory is often referred to as Structural Complexity Theory. In contrast, proving explicit lower bounds for given problems is the topic of the so-called Concrete Complexity Theory. As nobody is currently able to prove superlinear time bounds for explicitly deﬁned problems on general computation models like Turing machines, one considers somewhat restricted models like 1-tape Turing machines, monotone Boolean circuits, Boolean circuits with bounded depth, algebraic computation models, and several kinds of parallel computation models. This lecture surveys approaches to prove such lower bound on various such models.",
                         "learning_objectives": "The students get to know fundamental techniques in the area of complexity theory. They can decide in which complexity class the storage space and the runtime requirements of algorithmic problems can be classiﬁed. They can classify new problems into complexity classes.",
                         "implementation_method": "Advanced Complexity Theory: • Lecture with beamer and blackboard • Practice in small groups • Expected activities of the students:contributions to presence exercises, homework",
                         "assessment_modalities": "Oral exam (ca. 40 Minutes) The responsible lecturer announces type and duration of assessment modalities in the ﬁrst three weeks of the lecture period at latest.",
                         "partial_module_exams": "none",
                         "course_achievement": "Studienleistung: written exercises The responsible lecturer announces the requirements for course achievements in the ﬁrst three weeks of the lecture period at latest.",
                         "prerequisites_for_participation_in_module_exam": "Passing of course achievement.",
                         "prerequisites_for_obtaining_credits": "Passing of module exam.",
                         "weight_for_overall_grade": "The module is weighted with 6 credits.",
                         "person_responsible_for_the_module": "Prof. Dr. Friedhelm Meyer auf der Heide",
                         "learning_material,_literature": "Advanced Complexity Theory: C.H. Papadimitiriou, Computational Complexity, Addison-Wesley, S. Arora, B. Barak, Computational Complexity - A Modern Approach, Cambridge University Press; Folien- satz der Vorlesung, U¨ bungsbl¨atter",
                         "remarks": "none"
                    }
               },
               {
                    "chapter": "3.5",
                    "title": "Advanced Computer Architecture",
                    "page": 23,
                    "type": "Elective Module",
                    "count": 2,
                    "items": {
                         "module_name": "Advanced Computer Architecture / Advanced Computer Architecture",
                         "workload": "180 h",
                         "credits": "6 LP",
                         "semester": "• Advanced Computer Architecture : arbitrary",
                         "course_teaching_form": "Advanced Computer Architecture: Lecture ( 45h / 105h / EN / WS / 50 ) Advanced Computer Architecture: Tutorial ( 30h / 0h / EN / WS / 25 )",
                         "choices_in_module": "none",
                         "course_prerequiites": "none",
                         "recommended_proﬁciencies": "Advanced Computer Architecture: Basic knowledge in computer architecture.",
                         "content": "Advanced Computer Architecture: The course teaches concepts and methods used in modern processor architecture to exploit the available parallelism at the levels of instructions, data and threads.",
                         "learning_objectives": "After attending the course, the students • are able to explain principles of modern memory hierarchies, • to analyze diﬀerent levels of parallelism, • to assess the suitability of diﬀerent architectural concepts and thus • to evaluate modern developments in computer architecture.",
                         "implementation_method": "Advanced Computer Architecture: • Lecture with projector and board • Interactive exercises in the lecture room item Computer-based exercises with simulation tools • Analysis of case studies",
                         "assessment_modalities": "Oral exam (ca. 40 Minutes) The responsible lecturer announces type and duration of assessment modalities in the ﬁrst three weeks of the lecture period at latest.",
                         "partial_module_exams": "none",
                         "course_achievement": "none",
                         "prerequisites_for_participation_in_module_exam": "none",
                         "prerequisites_for_obtaining_credits": "Passing of module exam.",
                         "weight_for_overall_grade": "The module is weighted with 6 credits.",
                         "person_responsible_for_the_module": "Prof. Dr. Marco Platzner",
                         "learning_material,_literature": "Advanced Computer Architecture: • Vorlesungsfolien und U¨ bungsblaetter • Aufgabenbl¨atter und technische Dokumentation fu¨r die Rechneru¨bungen • Hennessey, Patterson: Computer Architecture: A Quantitative Approach (5th edition), Morgan Kauf- mann, 2012. • Aktuelle Hinweise auf alternative und erg¨anzende Literatur, sowie Lehrmaterialien auf der Webseite und in den Vorlesungsfolien",
                         "remarks": "none"
                    }
               },
               {
                    "chapter": "3.6",
                    "title": "Advanced Distributed Algorithms and Data Structures",
                    "page": 25,
                    "type": "Elective Module",
                    "count": 2,
                    "items": {
                         "module_name": "Advanced Distributed Algorithms and Data Structures / Advanced Dis- tributed Algorithms and Data Structures",
                         "workload": "180 h",
                         "credits": "6 LP",
                         "semester": "• Advanced Distributed Algorithms and Data Structures : arbitrary",
                         "course_teaching_form": "Advanced Distributed Algorithms and Data Structures: Lecture ( 45h / 105h / EN / WS / 30 ) Advanced Distributed Algorithms and Data Structures: Tutorial ( 30h / 0h / EN / WS / 30 )",
                         "choices_in_module": "none",
                         "course_prerequiites": "none",
                         "recommended_proﬁciencies": "Advanced Distributed Algorithms and Data Structures: Algorithms and data structures, distributed algorithms and data structures",
                         "content": "Advanced Distributed Algorithms and Data Structures: The lecture presents advanced methods that allow the design of highly scalable distributed algorithms and data structures. It splits into separate areas that are currently very relevant in the area of distributed systems. This includes locality-preserving systems, robust information systems, and programmable matter.",
                         "learning_objectives": "Students get to know advanced methods and algorithms for currently very relevant distributed systems. They are able to adapt algorithms to new situations and to determine their complexity. They can implement basic distributed algorithms.",
                         "implementation_method": "Advanced Distributed Algorithms and Data Structures: Lecture with tutorials and software project",
                         "assessment_modalities": "Oral exam (ca. 40 Minutes) The responsible lecturer announces type and duration of assessment modalities in the ﬁrst three weeks of the lecture period at latest.",
                         "partial_module_exams": "none",
                         "course_achievement": "Studienleistung: written exercises The responsible lecturer announces the requirements for course achievements in the ﬁrst three weeks of the lecture period at latest.",
                         "prerequisites_for_participation_in_module_exam": "Passing of course achievement.",
                         "prerequisites_for_obtaining_credits": "Passing of module exam.",
                         "weight_for_overall_grade": "The module is weighted with 6 credits.",
                         "person_responsible_for_the_module": "Prof. Dr. rer. nat. Christian Scheideler",
                         "learning_material,_literature": "Advanced Distributed Algorithms and Data Structures: Skript",
                         "remarks": "none"
                    }
               },
               {
                    "chapter": "3.7",
                    "title": "Advanced Software Engineering",
                    "page": 27,
                    "type": "Elective Module",
                    "count": 2,
                    "items": {
                         "module_name": "Advanced Software Engineering: Methods, Architectures, Industrial Ap- plications / Advanced Software Engineering: Methods, Architectures,",
                         "workload": "Industrial Applications",
                         "credits": "180 h",
                         "semester": "6 LP • Advanced Software Engineering: Methods, Architectures, Industrial Applications : arbitrary",
                         "course_teaching_form": "Advanced Software Engineering: Methods, Architectures, Industrial Applications: Lecture ( 45h / 105h / EN / WS / 92 ) Advanced Software Engineering: Methods, Architectures, Industrial Applications: Tutorial ( 30h / 0h / EN / WS / 30 )",
                         "choices_in_module": "none",
                         "course_prerequiites": "none",
                         "recommended_proﬁciencies": "Advanced Software Engineering: Methods, Architectures, Industrial Applications: Model-based soft- ware development",
                         "content": "Advanced Software Engineering: Methods, Architectures, Industrial Applications: The course will cover advanced concepts and methods of Software Engineering. This comprises approaches for the develop- ment of architectures, modern software engineering methods as well as project management techniques. In particular, the following topics will be presented and discussed: - Architecture (Service-oriented Architecture, Microservices, Web Services, Mobile Architectures, Architectural Frameworks, Quasar Enterprise) - Methods (Agile Software Development Methods like Scrum, Situational Method Engi- neering, Requirements Engineering, DevOps) - Project Management (Eﬀort Estimation, Economics of Software Projects) The course is enriched by talks of experienced industrial experts, who report and discuss the use of modern software engineering techniques in practice.",
                         "learning_objectives": "The students are able to explain and deploy concepts of modern software engineering. They know and are able to deplay essential concepts to develop and maintain architectures of software systems, to customize and use software engineering methods in a speciﬁc project, and to do project management tasks like eﬀort estimation.",
                         "implementation_method": "Advanced Software Engineering: Methods, Architectures, Industrial Applications: Partially slides and partially board writing. All essential concepts and techniques will be repeatedly applied in examples during the tutorial. In a lab part, the techniques will be employed.",
                         "assessment_modalities": "Oral exam (ca. 40 Minutes) The responsible lecturer announces type and duration of assessment modalities in the ﬁrst three weeks of the lecture period at latest.",
                         "partial_module_exams": "none",
                         "course_achievement": "none",
                         "prerequisites_for_participation_in_module_exam": "none",
                         "prerequisites_for_obtaining_credits": "Passing of module exam.",
                         "weight_for_overall_grade": "The module is weighted with 6 credits.",
                         "person_responsible_for_the_module": "Prof. Dr. Gregor Engels",
                         "learning_material,_literature": "Advanced Software Engineering: Methods, Architectures, Industrial Applications: Vorlesungsfolien, U¨ bungsaufgaben",
                         "remarks": "none"
                    }
               },
               {
                    "chapter": "3.8",
                    "title": "Algorithmic Game Theory",
                    "page": 29,
                    "type": "Elective Module",
                    "count": 2,
                    "items": {
                         "module_name": "Algorithmic Game Theory / Algorithmic Game Theory",
                         "workload": "180 h",
                         "credits": "6 LP",
                         "semester": "• Algorithmic Game Theory : arbitrary",
                         "course_teaching_form": "Algorithmic Game Theory : Lecture ( 45h / 105h / EN / WS oder SS / 25 ) Algorithmic Game Theory : Tutorial ( 30h / 0h / EN / WS oder SS / 25 )",
                         "choices_in_module": "none",
                         "course_prerequiites": "none",
                         "recommended_proﬁciencies": "Algorithmic Game Theory : Algorithms and data structures, linear algebra, probability theory",
                         "content": "Algorithmic Game Theory : This Lecture introduces the most important basic concepts and methods from the ﬁeld of algorithmic game theory. It considers various topics from non-cooperative game theory as well as from social choice,",
                         "learning_objectives": "Students get to know the important concepts of non cooperative and cooperative game theory, in particular standard game models and solution concepts. They understand a variety of algorithmic techniques and complexity results for computing game-theoretic solution concepts. They apply solution concepts, algorithms, and complexity results to unseen games that are variants of known examples and understand the state of the art in some areas of algorithmic research, including new developments and open problems.",
                         "implementation_method": "Algorithmic Game Theory : Eine Mischung aus Folien und Tafelanschrieb. Alle wichtigen Konzepte und Techniken werden in U¨ bungen anhand von Beispielen weiter vertieft.",
                         "assessment_modalities": "Oral exam (ca. 40 Minutes) The responsible lecturer announces type and duration of assessment modalities in the ﬁrst three weeks of the lecture period at latest.",
                         "partial_module_exams": "none",
                         "course_achievement": "Studienleistung: written exercises The responsible lecturer announces the requirements for course achievements in the ﬁrst three weeks of the lecture period at latest.",
                         "prerequisites_for_participation_in_module_exam": "Passing of course achievement.",
                         "prerequisites_for_obtaining_credits": "Passing of module exam.",
                         "weight_for_overall_grade": "The module is weighted with 6 credits.",
                         "person_responsible_for_the_module": "Jun.-Prof. Dr. Alexander Skopalik",
                         "learning_material,_literature": "Algorithmic Game Theory: Noam Nisan, Tim Roughgarden, Eva Tardos, and Vijay V. Vazirani. 2007. Algorithmic Game Theory. Cambridge University Press, New York, NY, USA. Slides Exercises",
                         "remarks": "none"
                    }
               },
               {
                    "chapter": "3.9",
                    "title": "Algorithms for Highly Complex Virtual Scenes",
                    "page": 31,
                    "type": "Elective Module",
                    "count": 2,
                    "items": {
                         "module_name": "Algorithms for Highly Complex Virtual Scenes / Algorithms for Highly Complex Virtual Scenes",
                         "workload": "180 h",
                         "credits": "6 LP",
                         "semester": "• Algorithmen fu¨r hochkomplexe virtuelle Szenen : arbitrary",
                         "course_teaching_form": "Algorithms for Highly Complex Virtual Scenes: Lecture ( 45h / 105h / EN / WS / 40 ) Algorithms for Highly Complex Virtual Scenes: Tutorial ( 30h / 0h / EN / WS / 20 )",
                         "choices_in_module": "none",
                         "course_prerequiites": "none",
                         "recommended_proﬁciencies": "Algorithms for Highly Complex Virtual Scenes: Willingness and ability to learn the creative process of algorithm design and eﬃciency analysis using mathematical methods. Basic Knowledge of some basic algorithms and data structures and their analyses is assumed.",
                         "content": "Algorithms for Highly Complex Virtual Scenes: Walkthrough systems allow viewing and walking through a virtual 3D scene and ﬁnds application in architecture programs, simulations or games. The eﬃciency of real-time rendering algorithms is crucial for a smooth and fast visualization of the virtual 3D scene in a walkthrough system. There are diﬀerent algorithmic approaches to reduce highly complex 3D geometric data and to achieve a rendering of the scene in real time. The lecture introduces algorith- mic approaches in the areas of visibility culling, simpliﬁcation, level of detail, image-based rendering and further approaches.",
                         "learning_objectives": "The students can apply fundamental techniques in the area of real time rendering of virtual 3D scenes. They can decide in which virtual 3D scene which algorithm is most appropriate. They can adapt algorithms to a new situation.",
                         "implementation_method": "Algorithms for Highly Complex Virtual Scenes: • Lecture with beamer and blackboard • Practice in small groups • Expected activities of the students: Collaboration in presence exercises Homework • exercise sheets, sample solutions are presented in central exercises • In exercises and homework sheets and teh analysis of algorithms of selected examples are practiced.",
                         "assessment_modalities": "Oral exam (ca. 40 Minutes) The responsible lecturer announces type and duration of assessment modalities in the ﬁrst three weeks of the lecture period at latest.",
                         "partial_module_exams": "none",
                         "course_achievement": "Studienleistung: written exercises The responsible lecturer announces the requirements for course achievements in the ﬁrst three weeks of the lecture period at latest.",
                         "prerequisites_for_participation_in_module_exam": "Passing of course achievement.",
                         "prerequisites_for_obtaining_credits": "Passing of module exam.",
                         "weight_for_overall_grade": "The module is weighted with 6 credits.",
                         "person_responsible_for_the_module": "Dr. Matthias Fischer",
                         "learning_material,_literature": "Algorithmen fu¨r hochkomplexe virtuelle Szenen: Standardlehrbu¨cher, Foliensatz der Vorlesung, U¨ bungsbla¨tter • Real-Time Rendering; Tomas Akenine-M¨oller, Eric Haines; AK Peters, 2002. • Level of Detail for 3D Graphics; David Luebke, Martin Reddy, Jonathan D. Cohen; Morgan Kaufmann Publishers, 2002.",
                         "remarks": "none"
                    }
               },
               {
                    "chapter": "3.10",
                    "title": "Algorithms for Synthesis and Optimization of Integrated Circuits",
                    "page": 33,
                    "type": "Elective Module",
                    "count": 2,
                    "items": {
                         "module_name": "Algorithms for Synthesis and Optimization of Integrated Circuits / Al- gorithms for Synthesis and Optimization of Integrated Circuits",
                         "workload": "180 h",
                         "credits": "6 LP",
                         "semester": "• Algorithms for Synthesis and Optimization of Integrated Circuits : ar- bitrary",
                         "course_teaching_form": "Algorithms for Synthesis and Optimization of Integrated Circuits: Lecture ( 45h / 105h / EN / SS / 30 ) Algorithms for Synthesis and Optimization of Integrated Circuits: Tutorial ( 30h / 0h / EN / SS / 30 )",
                         "choices_in_module": "none",
                         "course_prerequiites": "none",
                         "recommended_proﬁciencies": "Algorithms for Synthesis and Optimization of Integrated Circuits: Knowledge of ”Digital Design” is beneﬁcial.",
                         "content": "Algorithms for Synthesis and Optimization of Integrated Circuits: The course provides the most re- markable features of digital synthesis, and explains the details of transforming hardware description languages into circuit descriptions. Besides, the major techniques for logic optimization are discussed, and then the eﬃcient use of current design tools are exercised in practical sessions.",
                         "learning_objectives": "After attending the course, the students are able to • select among the available optimisation methods in design of digital circuits, • identify major problems in design of integrated circuits and recognize circuit design tradeoﬀs • examine current digital design tools and methods",
                         "implementation_method": "Algorithms for Synthesis and Optimization of Integrated Circuits: • Lecture with projector and board • Interactive exercises in the lecture room • Computer-based exercises with hardware synthesis tools",
                         "assessment_modalities": "Oral exam (ca. 40 Minutes) The responsible lecturer announces type and duration of assessment modalities in the ﬁrst three weeks of the lecture period at latest.",
                         "partial_module_exams": "none",
                         "course_achievement": "none",
                         "prerequisites_for_participation_in_module_exam": "none",
                         "prerequisites_for_obtaining_credits": "Passing of module exam.",
                         "weight_for_overall_grade": "The module is weighted with 6 credits.",
                         "person_responsible_for_the_module": "Dr. Hassan Ghasemzadeh Mohammadi",
                         "learning_material,_literature": "Algorithms for Synthesis and Optimization of Integrated Circuits: • Vorlesungsfolien und U¨ bungsbl¨atter • Aufgabenbl¨atter und technische Dokumentation fu¨r die Rechneru¨bungen • Micheli, Giovanni De. Synthesis and optimization of digital circuits. McGraw-Hill Higher Education, 1994. • Aktuelle Hinweise auf alternative und erga¨nzende Literatur, sowie Lehrmaterialien auf der Webseite und in den Vorlesungsfolien",
                         "remarks": "none"
                    }
               },
               {
                    "chapter": "3.11",
                    "title": "Architectures of Parallel Computer Systems",
                    "page": 35,
                    "type": "Elective Module",
                    "count": 2,
                    "items": {
                         "module_name": "Architectures of Parallel Computer Systems / Architectures of Parallel Computer Systems",
                         "workload": "180 h",
                         "credits": "6 LP",
                         "semester": "• Architektur paralleler Rechnersysteme : arbitrary",
                         "course_teaching_form": "Architecture of Parallel Computer Systems: Lecture ( 45h / 105h / DE / SS / 20 ) Architecture of Parallel Computer Systems: Tutorial ( 30h / 0h / DE / SS / 20 )",
                         "choices_in_module": "none",
                         "course_prerequiites": "none",
                         "recommended_proﬁciencies": "Architecture of Parallel Computer Systems: Principles of computer architectures",
                         "content": "Architecture of Parallel Computer Systems: The lecture considers computer architectures of actual parallel computer systems and the usage of this systems. The focus of the lecture is on high-performance computers (supercomputers).",
                         "learning_objectives": "wird nachgetragen",
                         "implementation_method": "Architecture of Parallel Computer Systems: Presentation of slides. Exercises on available high per- formance computers to practise the usage of the systems and deepen the knowledge of the lecture.",
                         "assessment_modalities": "Oral exam (ca. 40 Minutes) The responsible lecturer announces type and duration of assessment modalities in the ﬁrst three weeks of the lecture period at latest.",
                         "partial_module_exams": "none",
                         "course_achievement": "Studienleistung: written exercises The responsible lecturer announces the requirements for course achievements in the ﬁrst three weeks of the lecture period at latest.",
                         "prerequisites_for_participation_in_module_exam": "Passing of course achievement.",
                         "prerequisites_for_obtaining_credits": "Passing of module exam.",
                         "weight_for_overall_grade": "The module is weighted with 6 credits.",
                         "person_responsible_for_the_module": "Dr. Jens Simon",
                         "learning_material,_literature": "Architektur paralleler Rechnersysteme: Foliensatz",
                         "remarks": "none"
                    }
               },
               {
                    "chapter": "3.12",
                    "title": "Bitcoins, Cryptocurrencies, and Privacy-Enhancing Technologies",
                    "page": 37,
                    "type": "Elective Module",
                    "count": 2,
                    "items": {
                         "module_name": "Bitcoins, Cryptocurrencies, and Privacy-Enhancing Technologies / Bit- coins, Cryptocurrencies, and Privacy-Enhancing Technologies",
                         "workload": "180 h",
                         "credits": "6 LP",
                         "semester": "• Bitcoins, Cryptocurrencies, and Privacy-Enhancing Technologies : ar- bitrary",
                         "course_teaching_form": "Bitcoins, Cryptocurrencies, and Privacy-Enhancing Technologies: Lecture ( 45h / 105h / EN / SS / 30 ) Bitcoins, Cryptocurrencies, and Privacy-Enhancing Technologies: Tutorial ( 30h / 0h / EN / SS / 30 )",
                         "choices_in_module": "none",
                         "course_prerequiites": "none",
                         "recommended_proﬁciencies": "Bitcoins, Cryptocurrencies, and Privacy-Enhancing Technologies: Foundational knowledge of cryptog- raphy is recommended, but not mandatory.",
                         "content": "Bitcoins, Cryptocurrencies, and Privacy-Enhancing Technologies: This course covers techniques for the construction of decentralized digital currencies like, e.g., Bitcoin, an understanding of the security properties achievable and achieved by these, and cryptographic tools for the protection of user privacy in such applications.",
                         "learning_objectives": "Students know the basic concepts underlying modern distributed cryptographic currencies and can explain and apply them. This includes cryptographic hash functions, digital signatures, and blockchains. They know the necessary and suﬃcient security requirements for these building blocks and can assess the extent to which a given protocol or algorithm fulﬁlls these. They know the terms pseudonymity and anonymity and their exact meaning and distinction, are able to investigate whether a given application possesses these features, know advanced cryptographic techniques to achieve strong anonymity, such as ring signatures, and know how these techniques are used in modern applications to protect the privacy of users.",
                         "implementation_method": "Bitcoins, Cryptocurrencies, and Privacy-Enhancing Technologies: • Lectures with slides and blackboard notes • Exercises and presentation of solutions by participants",
                         "assessment_modalities": "Oral exam (ca. 40 Minutes) The responsible lecturer announces type and duration of assessment modalities in the ﬁrst three weeks of the lecture period at latest.",
                         "partial_module_exams": "none",
                         "course_achievement": "Studienleistung: written exercises The responsible lecturer announces the requirements for course achievements in the ﬁrst three weeks of the lecture period at latest.",
                         "prerequisites_for_participation_in_module_exam": "Passing of course achievement.",
                         "prerequisites_for_obtaining_credits": "Passing of module exam.",
                         "weight_for_overall_grade": "The module is weighted with 6 credits.",
                         "person_responsible_for_the_module": "Prof. Dr., Tibor Jager",
                         "learning_material,_literature": "Bitcoins, Cryptocurrencies, and Privacy-Enhancing Technologies: • Vorlesungsfolien • Tafelanschrieb • Originalliteratur",
                         "remarks": "none"
                    }
               },
               {
                    "chapter": "3.13",
                    "title": "Build It, Break It, Fix It",
                    "page": 39,
                    "type": "Elective Module",
                    "count": 2,
                    "items": {
                         "module_name": "Build It, Break It, Fix It / Build It, Break It, Fix It",
                         "workload": "180 h",
                         "credits": "6 LP",
                         "semester": "• Build It, Break It, Fix It : arbitrary",
                         "course_teaching_form": "Build It, Break It, Fix It: Lecture ( 45h / 105h / EN / SS / 20 ) Build It, Break It, Fix It: Tutorial ( 30h / 0h / EN / SS / 20 )",
                         "choices_in_module": "none",
                         "course_prerequiites": "none",
                         "recommended_proﬁciencies": "Build It, Break It, Fix It: A mature understanding of the Java programming language and software security requirements. Secure software development practices and experience in the ﬁeld of software exploitation and vulnera- bility discovery will be helpful.",
                         "content": "Build It, Break It, Fix It: This course aims at teaching basic principles of secure software development in a very practical fashion. It is based on the ”Break It, Build It, Fix It” security contest by Ruef et al. [1]. The contest is separated into three phases that test the applicant’s skills in the ﬁelds of building, breaking and ﬁxing software products. In the ”Build It” phase, students will be asked to gather in teams and develop small software projects based on a formal speciﬁcation, also including security requirements. In the ”Break It” phase, the developed software will be exchanged between development teams to break the implementation, i.e., ﬁnd and exploit security vulnerabilities in code of other teams. Afterward, in the ”Fix It” phase, teams will get the chance to ﬁx found vulnerabilities and, hence, render their software product more secure. The course will contain a theoretical part in which basic strategies of secure software development and vulnerability discovery are presented. Furthermore, speciﬁc vulnerability classes and examples of their exploitation will be presented as stimulus at the beginning of the ”Break It” phase. Nevertheless, the course is generally of a very practical nature and since securing a software product, as well as breaking it, demands a wide variety of skills and creativity, a quite high amount of motivation and self-organization is required.",
                         "learning_objectives": "After having attended this course, students will have. . . -gained knowledge and experience in the ﬁeld of secure software development -gained knowledge and experience in the ﬁeld of software exploitation as well as vulnerability discovery -learned common real world software vulnerabilities and ways of exploiting them",
                         "implementation_method": "Build It, Break It, Fix It:",
                         "assessment_modalities": "Oral exam (ca. 40 Minutes) The responsible lecturer announces type and duration of assessment modalities in the ﬁrst three weeks of the lecture period at latest.",
                         "partial_module_exams": "none",
                         "course_achievement": "Studienleistung: Practical work Qualiﬁzierte Teilnahme: Practical work with subsequent discussion The responsible lecturer announces the requirements for course achievements in the ﬁrst three weeks of the lecture period at latest.",
                         "prerequisites_for_participation_in_module_exam": "Passing of course achievement.",
                         "prerequisites_for_obtaining_credits": "Passing of module exam.",
                         "weight_for_overall_grade": "The module is weighted with 6 credits.",
                         "person_responsible_for_the_module": "Prof. Dr. Eric Bodden",
                         "learning_material,_literature": "Build It, Break It, Fix It: Das Kursmaterial wird auf der KoaLA Seite des Kurses angeboten werden.",
                         "remarks": "none"
                    }
               },
               {
                    "chapter": "3.14",
                    "title": "Clustering Algorithms",
                    "page": 41,
                    "type": "Elective Module",
                    "count": 2,
                    "items": {
                         "module_name": "Clustering Algorithms / Clustering Algorithms",
                         "workload": "180 h",
                         "credits": "6 LP",
                         "semester": "• Clustering Algorithmen : arbitrary",
                         "course_teaching_form": "Clustering Algorithms: Lecture ( 45h / 105h / EN / WS oder SS / 25 ) Clustering Algorithms: Tutorial ( 30h / 0h / EN / WS oder SS / 25 )",
                         "choices_in_module": "none",
                         "course_prerequiites": "none",
                         "recommended_proﬁciencies": "Clustering Algorithms: Algorithms and data structures, linear algebra, probability theory",
                         "content": "Clustering Algorithms: We study an important tool to analyze data: clustering. Clustering is the process of dividing data into useful or sensible groups. A sensible division should resemble the data’s natural structure. Sometimes the goal is that each cluster should contain as many items of a similar kind as possible ( for example in data compression). Clustering is a very natural way to analyze and structure data. Especially in natural sciences we are working with data whose structure is unknown to us. An example is the human DNA, that humankind is trying to decode. Clustering can be a very powerful tool in such cases. We re view standard techniques for clustering like Lloyd’s algorithm and agglomerative clustering. We also look at extensions and generalizations of clusterings like estimating model parameters.",
                         "learning_objectives": "Students know the main clustering algorithms. Depending on the problem at hand they can decide which algorithm is most appropriate. They can adapt algorithms to new situations. Students know various methods for modeling clustering problems. They can apply and adapt the methods. Depending on the modeling, they can choose appropriate algorithms and assess their quality.",
                         "implementation_method": "Clustering Algorithms: Lectures, exercises, reading groups, short presentations",
                         "assessment_modalities": "Oral exam (ca. 40 Minutes) The responsible lecturer announces type and duration of assessment modalities in the ﬁrst three weeks of the lecture period at latest.",
                         "partial_module_exams": "none",
                         "course_achievement": "Studienleistung: written exercises The responsible lecturer announces the requirements for course achievements in the ﬁrst three weeks of the lecture period at latest.",
                         "prerequisites_for_participation_in_module_exam": "Passing of course achievement.",
                         "prerequisites_for_obtaining_credits": "Passing of module exam.",
                         "weight_for_overall_grade": "The module is weighted with 6 credits.",
                         "person_responsible_for_the_module": "Prof. Dr. rer. nat. Johannes Bl¨omer",
                         "learning_material,_literature": "Clustering Algorithmen: David J.C MacKay, Information Theory, Inference and Learning Algorithms Christopher M. Bishop, Pattern Recognition and Machine Learning Folien der Vorlesung",
                         "remarks": "none"
                    }
               },
               {
                    "chapter": "3.15",
                    "title": "Compiler Construction",
                    "page": 43,
                    "type": "Elective Module",
                    "count": 2,
                    "items": {
                         "module_name": "Compiler Construction / Compiler Construction",
                         "workload": "180 h",
                         "credits": "6 LP",
                         "semester": "• Compilerbau : arbitrary",
                         "course_teaching_form": "Compiler Construction: Lecture ( 45h / 105h / EN / WS / 25 ) Compiler Construction: Tutorial ( 30h / 0h / EN / WS / 25 )",
                         "choices_in_module": "none",
                         "course_prerequiites": "none",
                         "recommended_proﬁciencies": "Compiler Construction: An undergraduate course on compilers focusing on basic concepts of frontends (e.g., language theory, grammars, lexing, parsing). Conceptually builds on the course “Programming Languages and Compilers”.",
                         "content": "Compiler Construction: While the predecessor lecture ”Programming Languages and Compilers” (PLaC, Bachelor lecture) focuses on the frontend part of a compiler, this lecture focuses on the com- piler backend. More precisely, we will discuss a variety of diﬀerent optimizations, such as instruction scheduling, instruction selection, and register allocation. To complement the theoretical foundations of this course, we will study the concrete implementation in the LLVM compiler framework.",
                         "learning_objectives": "",
                         "implementation_method": "Compiler Construction:",
                         "assessment_modalities": "Oral exam (ca. 40 Minutes) The responsible lecturer announces type and duration of assessment modalities in the ﬁrst three weeks of the lecture period at latest.",
                         "partial_module_exams": "none",
                         "course_achievement": "Studienleistung: written exercises The responsible lecturer announces the requirements for course achievements in the ﬁrst three weeks of the lecture period at latest.",
                         "prerequisites_for_participation_in_module_exam": "Passing of course achievement.",
                         "prerequisites_for_obtaining_credits": "Passing of module exam.",
                         "weight_for_overall_grade": "The module is weighted with 6 credits.",
                         "person_responsible_for_the_module": "Prof.Dr. Stefan Brunthaler",
                         "learning_material,_literature": "Compilerbau: • Appel: Modern Compiler Construction in ML. • Cooper, Torczon: Engineering a Compiler.",
                         "remarks": "none"
                    }
               },
               {
                    "chapter": "3.16",
                    "title": "Computational Geometry",
                    "page": 45,
                    "type": "Elective Module",
                    "count": 2,
                    "items": {
                         "module_name": "Computational Geometry / Computational Geometry",
                         "workload": "180 h",
                         "credits": "6 LP",
                         "semester": "• Algorithmische Geometrie : arbitrary",
                         "course_teaching_form": "Computational Geometry: Lecture ( 45h / 105h / EN / SS / 40 ) Computational Geometry: Tutorial ( 30h / 0h / EN / SS / 20 )",
                         "choices_in_module": "none",
                         "course_prerequiites": "none",
                         "recommended_proﬁciencies": "Computational Geometry: Willingness and ability to learn the creative process of algorithm design and eﬃciency analysis using mathematical methods. Basic Knowledge of some basic algorithms and data structures and their analyses is assumed.",
                         "content": "Computational Geometry: The lecture deals with algorithms and data structures in the area of com- putational geometry. The basic elements and input are geometric data (points, lines, circles, polygons, volumes). The problems are formulated geometrically and the task is to ﬁnd an algorithmic solution using special geometric data structures. The algorithms are theoretically analyzed. For this purpose, runtime and space is analyzed and correctness of the algorithms is proved.",
                         "learning_objectives": "The students can apply fundamental techniques in the area of computational geometry. They can decide for which geometric problem which algorithm is most appropriate. They can adapt algorithms to a new situation.",
                         "implementation_method": "Computational Geometry: • Lecture with beamer and blackboard • Practice in small groups • Expected activities of the students: Collaboration in presence exercises Homework • exercise sheets, sample solutions are presented in central exercises • In exercises and homework sheets and teh analysis of algorithms of selected examples are practiced.",
                         "assessment_modalities": "Oral exam (ca. 40 Minutes) The responsible lecturer announces type and duration of assessment modalities in the ﬁrst three weeks of the lecture period at latest.",
                         "partial_module_exams": "none",
                         "course_achievement": "Studienleistung: written exercises The responsible lecturer announces the requirements for course achievements in the ﬁrst three weeks of the lecture period at latest.",
                         "prerequisites_for_participation_in_module_exam": "Passing of course achievement.",
                         "prerequisites_for_obtaining_credits": "Passing of module exam.",
                         "weight_for_overall_grade": "The module is weighted with 6 credits.",
                         "person_responsible_for_the_module": "Dr. Matthias Fischer",
                         "learning_material,_literature": "Algorithmische Geometrie: Standardlehrbu¨cher, Foliensatz der Vorlesung, U¨ bungsbl¨atter • Computational Geometry: Algorithms and Applications Mark de Berg, Otfried Cheong, Marc van Kreveld, Mark Overmars, Springer-Verlag, 2008 • Algorithmische Geometrie Rolf Klein, Springer-Verlag, 2005 • Lectures on Discrete Geomtetry Jiri Matousek, Springer-Verlag, 2002.",
                         "remarks": "none"
                    }
               },
               {
                    "chapter": "3.17",
                    "title": "Contextual Informatics",
                    "page": 47,
                    "type": "Elective Module",
                    "count": 2,
                    "items": {
                         "module_name": "Contextual Informatics / Contextual Informatics",
                         "workload": "180 h",
                         "credits": "6 LP",
                         "semester": "• Kontextuelle Informatik : arbitrary",
                         "course_teaching_form": "Contextual Informatics: Lecture ( 30h / 105h / DE / WS / 40 ) Contextual Informatics: Tutorial ( 45h / 0h / DE / WS / 20 )",
                         "choices_in_module": "none",
                         "course_prerequiites": "none",
                         "recommended_proﬁciencies": "Contextual Informatics: Proﬁciency of a Bachelor in Computer Science or a comparable degree",
                         "content": "Contextual Informatics: Computer scientists and programmers develop products based on symbolic descriptions (programs, speciﬁcations, documentation etc.) by modeling a speciﬁc domain. A number of diﬀerent questions arise when such products are being developed: How can the developers adequately model the data that are to be processed as well as the processes that are to be implemented? Which consequences result from the possibility to develop interactive systems? When using the software, which role will the users play, which the software? Which underlying conditions of the usage context need to be considered? The lecture ”Contextual Informatics” discusses the theoretical and conceptual foundations of computer science relevant to the further considerations. Special attention will be paid to diﬀerentiate between technical concepts and the sphere of usage. Against this background, theories of interactive systems will be explored in order to examine which role digital media play with respect to processes of the mind. When developing computer systems, relevant data and processes need to be anticipated to a certain degree and modeled as formal systems. This raises issues like the question under which conditions such a formal description can be made in an adequate way and with which consequences regarding the reliability and responsible use of computer systems in a given domain.",
                         "learning_objectives": "Students will learn to examine the role of interactive systems based on theories. They will learn to distinguish between technical and non-technical problems and how to relate these to each other. They will be enabled to assess current technological trends and computer systems as well as the potentials of innovation in the ﬁeld of digital media.",
                         "implementation_method": "Contextual Informatics: The content of the lecture will be delivered as talks with interactions from the students through questions and discussion. The tutorials will further explore the topics based on scientiﬁc literature in combination with short presentations by the students.",
                         "assessment_modalities": "Oral exam (ca. 40 Minutes) The responsible lecturer announces type and duration of assessment modalities in the ﬁrst three weeks of the lecture period at latest.",
                         "partial_module_exams": "none",
                         "course_achievement": "Studienleistung: written exercises The responsible lecturer announces the requirements for course achievements in the ﬁrst three weeks of the lecture period at latest.",
                         "prerequisites_for_participation_in_module_exam": "Passing of course achievement.",
                         "prerequisites_for_obtaining_credits": "Passing of module exam.",
                         "weight_for_overall_grade": "The module is weighted with 6 credits.",
                         "person_responsible_for_the_module": "Dr. Harald Selke",
                         "learning_material,_literature": "Kontextuelle Informatik: Vorlesungsfolien Wardrip-Fruin, N.; Montfort, N. (eds.): The New Media Reader. Cambridge, Ma.: MIT Press, 2003. Quinn, M. J.: Ethics for the Information Age. Boston, Ma.: Pearson, 7th edition, 2016. Begleitende wissenschaftliche Literatur wird in der Vorlesung vorgestellt.",
                         "remarks": "none"
                    }
               },
               {
                    "chapter": "3.18",
                    "title": "Deductive Veriﬁcation",
                    "page": 49,
                    "type": "Elective Module",
                    "count": 2,
                    "items": {
                         "module_name": "Deductive Veriﬁcation / Deductive Veriﬁcation",
                         "workload": "180 h",
                         "credits": "6 LP",
                         "semester": "• Deductive Veriﬁcation : arbitrary",
                         "course_teaching_form": "Deductive Veriﬁcation: Lecture ( 45h / 105h / EN / WS oder SS / 40 ) Deductive Veriﬁcation: Tutorial ( 30h / 0h / EN / WS oder SS / 40 )",
                         "choices_in_module": "none",
                         "course_prerequiites": "none",
                         "recommended_proﬁciencies": "Deductive Veriﬁcation: ﬁrst order logic, imperative programming",
                         "content": "Deductive Veriﬁcation: The course studies techniques for proving correctness of programs. In contrast to the model checking course, it will look at proof systems here, not automatic methods. The course starts with specifying assertions on (Java) programs which describe properties of programs at particular states. Such properties can then be checked during runtime. Assertions can however also be proven to hold using a Hoare calculus for program veriﬁcation. In the course we will look at proof calculi for sequential and parallel programs, and study their soundness and completeness. At the end, proof calculi for showing temporal logic properties are introduced.",
                         "learning_objectives": "The students know the key principles of program veriﬁcation. They can show correctness of both sequential and parallel programs. They know how to use assertions to describe the functionality of programs. They know a temporal logic and are able to use it to specify program properties.",
                         "implementation_method": "Deductive Veriﬁcation: Partially slides and partially board writing. Interaction with students via questions and example exercises. All essential concepts and techniques will be repeatedly applied in examples during the tutorial.",
                         "assessment_modalities": "Oral exam (ca. 40 Minutes) The responsible lecturer announces type and duration of assessment modalities in the ﬁrst three weeks of the lecture period at latest.",
                         "partial_module_exams": "none",
                         "course_achievement": "Studienleistung: written exercises The responsible lecturer announces the requirements for course achievements in the ﬁrst three weeks of the lecture period at latest.",
                         "prerequisites_for_participation_in_module_exam": "Passing of course achievement.",
                         "prerequisites_for_obtaining_credits": "Passing of module exam.",
                         "weight_for_overall_grade": "The module is weighted with 6 credits.",
                         "person_responsible_for_the_module": "Prof. Dr. Heike Wehrheim",
                         "learning_material,_literature": "Deductive Veriﬁcation: K. Apt, E.-R. Olderog: Veriﬁcation of sequential and concurrent programs Vorlesungsfolien, U¨ bungsaufgaben",
                         "remarks": "none"
                    }
               },
               {
                    "chapter": "3.19",
                    "title": "Designing code analyses for large-scale software systems",
                    "page": 51,
                    "type": "Elective Module",
                    "count": 2,
                    "items": {
                         "module_name": "Designing code analyses for large-scale software systems / Designing code analyses for large-scale software systems",
                         "workload": "180 h",
                         "credits": "6 LP",
                         "semester": "• Designing code analyses for large-scale software systems : arbitrary",
                         "course_teaching_form": "Designing code analyses for large-scale software systems: Lecture ( 45h / 105h / EN / WS / 30 ) Designing code analyses for large-scale software systems: Tutorial ( 30h / 0h / EN / WS / 30 )",
                         "choices_in_module": "none",
                         "course_prerequiites": "none",
                         "recommended_proﬁciencies": "Designing code analyses for large-scale software systems: The course Software Analysis is a recom- mended but not required prerequisite. A mature understanding of the Java programming languages and object-oriented programming will be helpful.",
                         "content": "Designing code analyses for large-scale software systems: Static code analysis has the goal of ﬁnding programming mistakes automatically, by searching for suspicious anti-patterns in a program’s code. This course will explain how to design static code analysis that are inter-procedural, i.e., consider the whole program, across procedure boundaries. Designing such analyses is challenging, as they need to handle millions of program statements eﬃciently and precisely. Example applications are drawn from the area of IT security.",
                         "learning_objectives": "After having attended this course, students will have learned. . . - how to make educated design decisions when designing automated code analysis for large-scale software systems, - which algorithms have which properties when using them to implement static code-analyses, - how to design real–world code analyses for practical problem cases from the area of IT security - how to interpret important terminology such as context, ﬂow, ﬁeld and object sensitivity - how to evaluate and explain the important limitations of static code analysis - which typical security code analyses exist (OWASP Top 10 etc.) and how they relate to the analysis frameworks explained in the course.",
                         "implementation_method": "Designing code analyses for large-scale software systems: Lectures and group exercises",
                         "assessment_modalities": "Oral exam (ca. 40 Minutes) The responsible lecturer announces type and duration of assessment modalities in the ﬁrst three weeks of the lecture period at latest.",
                         "partial_module_exams": "none",
                         "course_achievement": "none",
                         "prerequisites_for_participation_in_module_exam": "none",
                         "prerequisites_for_obtaining_credits": "Passing of module exam.",
                         "weight_for_overall_grade": "The module is weighted with 6 credits.",
                         "person_responsible_for_the_module": "Prof. Dr. Eric Bodden",
                         "learning_material,_literature": "Designing code analyses for large-scale software systems: Empfohlene Literatur: * Thomas Reps, Susan Horwitz, and Mooly Sagiv. 1995. Precise interprocedural dataﬂow analysis via graph reachability. POPL ’95 * Shmuel Sagiv, Thomas W. Reps, and Susan Horwitz. 1995. Precise Interprocedural Dataﬂow Analysis with Applications to Constant Propagation. TAPSOFT ’95 * Akash Lal, Thomas Reps, and Gogul Balakrishnan. 2005. Extended weighted pushdown systems. CAV 2005 * Nomair A. Naeem, Ondrej Lhot´ak, and Jonathan Rodriguez. 2010. Practical extensions to the IFDS algorithm. CC 2010 * Yannis Smaragdakis, Martin Bravenboer, and Ondrej Lhota´k. 2011. Pick your contexts well: understanding object-sensitivity. POPL 2011 * Eric Bodden. 2012. Inter-procedural data-ﬂow analysis with IFDS/IDE and Soot. SOAP 2012 * Rohan Padhye, Uday P. Khedker. Interprocedural Data Flow Analysis in Soot using Value Contexts. SOAP 2013",
                         "remarks": "none"
                    }
               },
               {
                    "chapter": "3.20",
                    "title": "Empiric performance evaluation",
                    "page": 53,
                    "type": "Elective Module",
                    "count": 2,
                    "items": {
                         "module_name": "Empiric performance evaluation / Empiric performance evaluation",
                         "workload": "180 h",
                         "credits": "6 LP",
                         "semester": "• Empirische Leistungsbewertung : arbitrary",
                         "course_teaching_form": "Empiric performance evaluation: Lecture ( 45h / 105h / EN / SS / 15 ) Empiric performance evaluation: Tutorial ( 30h / 0h / EN / SS / 15 )",
                         "choices_in_module": "none",
                         "course_prerequiites": "none",
                         "recommended_proﬁciencies": "Empiric performance evaluation: Bachelor-level stochastics.",
                         "content": "Empiric performance evaluation: This lecture discusses methods and procedures to conduct experimen- tal and simulation-based performance evaluations, along with a statistically solid evaluation of results. The techniques of this class are applicable to a wide range of systems.",
                         "learning_objectives": "Participants can determine whether a given system or modell is amenable to a particular performance evaluation method. They can design an experiment or a simulation and execute it; they can choose a suitable stochastic model and interprete the experimental results correctly. They can derive statistically justiﬁed conclusions, e.g., which system can be regarded as the best system out of a given collection.",
                         "implementation_method": "Empiric performance evaluation: Lecture with slides and blackboard; homework assignments.",
                         "assessment_modalities": "Oral exam (ca. 40 Minutes) The responsible lecturer announces type and duration of assessment modalities in the ﬁrst three weeks of the lecture period at latest.",
                         "partial_module_exams": "none",
                         "course_achievement": "Studienleistung: written exercises The responsible lecturer announces the requirements for course achievements in the ﬁrst three weeks of the lecture period at latest.",
                         "prerequisites_for_participation_in_module_exam": "Passing of course achievement.",
                         "prerequisites_for_obtaining_credits": "Passing of module exam.",
                         "weight_for_overall_grade": "The module is weighted with 6 credits.",
                         "person_responsible_for_the_module": "Prof. Dr. rer. nat. Holger Karl",
                         "learning_material,_literature": "Empirische Leistungsbewertung: Foliensatz, U¨ bungsbl¨atter, Lehrbuch Kelton & Law, Simulation Mod- elling and Analysis.",
                         "remarks": "none"
                    }
               },
               {
                    "chapter": "3.21",
                    "title": "Foundations of Cryptography",
                    "page": 55,
                    "type": "Elective Module",
                    "count": 2,
                    "items": {
                         "module_name": "Foundations of Cryptography / Foundations of Cryptography",
                         "workload": "180 h",
                         "credits": "6 LP",
                         "semester": "• Foundations of Cryptography : arbitrary",
                         "course_teaching_form": "Foundations of Cryptography: Lecture ( 45h / 105h / EN / SS / 25 ) Foundations of Cryptography: Tutorial ( 30h / 0h / EN / SS / 25 )",
                         "choices_in_module": "none",
                         "course_prerequiites": "none",
                         "recommended_proﬁciencies": "Foundations of Cryptography: Basic Knowledge in IT-Security and cryptography useful but not neces- sary, basic concepts of complexity theory and probability theory",
                         "content": "Foundations of Cryptography: The most important primitives of modern cryptography will be pre- sented. These include encryption schemes, digital signatures, identiﬁcation protocols, and multiparty computations. In each case we will deﬁne precise security notions. Starting from precisely stated assumptions, we develop constructions that provably satisfy these security deﬁnitions.",
                         "learning_objectives": "Students understand fundamental concepts and methods of modern cryptography. They are able to choose appropriate cryptographic tools for various security problems. Students are able to combine and modify basic cryptographic primitives, they are able to deﬁne new security concepts, they are able to the the security of new constructions with respect to the security concepts.",
                         "implementation_method": "Foundations of Cryptography: Lectures, exercises, reading groups",
                         "assessment_modalities": "Oral exam (ca. 40 Minutes) The responsible lecturer announces type and duration of assessment modalities in the ﬁrst three weeks of the lecture period at latest.",
                         "partial_module_exams": "none",
                         "course_achievement": "Studienleistung: written exercises The responsible lecturer announces the requirements for course achievements in the ﬁrst three weeks of the lecture period at latest.",
                         "prerequisites_for_participation_in_module_exam": "Passing of course achievement.",
                         "prerequisites_for_obtaining_credits": "Passing of module exam.",
                         "weight_for_overall_grade": "The module is weighted with 6 credits.",
                         "person_responsible_for_the_module": "Prof. Dr. rer. nat. Johannes Bl¨omer",
                         "learning_material,_literature": "Foundations of Cryptography: Oded Gorldreich, Foundations of Cryptography I,II, Jonathan Katz, Yehuda Lindell, Introduction to Modern Cryptography Folien der Vorlesung",
                         "remarks": "none"
                    }
               },
               {
                    "chapter": "3.22",
                    "title": "Fundamentals of Model-Driven Engineering",
                    "page": 57,
                    "type": "Elective Module",
                    "count": 3,
                    "items": {
                         "module_name": "Fundamentals of Model-Driven Engineering / Fundamentals of Model- Driven Engineering",
                         "workload": "180 h",
                         "credits": "6 LP",
                         "semester": "• Fundamentals of Model-Driven Engineering : arbitrary",
                         "course_teaching_form": "Fundamentals of Model-Driven Engineering: Lecture ( 45h / 105h / EN / WS / 30 ) Fundamentals of Model-Driven Engineering: Tutorial ( 30h / 0h / EN / WS / 30 )",
                         "choices_in_module": "none",
                         "course_prerequiites": "none",
                         "recommended_proﬁciencies": "Fundamentals of Model-Driven Engineering:",
                         "content": "Fundamentals of Model-Driven Engineering: Model-Driven Engineering focusses on the use of models, i.e., suitable abstractions, as primary artefacts in (software) engineering processes. Important tasks include specifying these models (metamodelling), deriving new models from other models (model trans- formation), and keeping diﬀerent but related models consistent (model synchronisation). While it is important to develop an intuitive understanding for central concepts such as models, meta- models, and model transformations, it is equally important to establish solid formal foundations for at least the basic concepts. This is especially the case when providing reliable tool support (e.g., static analyses) for MDE activities. This lecture, therefore, introduces basic MDE concepts including models, metamodels, and model trans- formations, providing a precise and detailed formalisation using very basic category theory. The lecture is designed to be especially accessible to computer scientists, by providing a hands-on constructive mapping of all deﬁnitions and results to programs in a main stream OO language (Java). The new FMDE lecture is designed to complement the existing MDSD lecture, so students can attend both, in any order.",
                         "learning_objectives": "Students are able to read and understand books and academic publications on graph transformation, and can learn and apply new deﬁnitions and constructions from such sources. Students are able to apply the formalisation techniques used in the lecture to formalise new structures and the rule-based manip- ulation of such structures. Students understand and value the advantages of a precise and constructive formalisation of pattern matching, constraints, and rules in the context of Model-Driven Engineering. Students know basic concepts of category theory and understand how and why these concepts are used to formalise graph transformation.",
                         "implementation_method": "Fundamentals of Model-Driven Engineering: Short lectures are interspersed with practical hands-on sessions. Exercises are solved and discussed in groups as an integrated part of the course. Every exercise has a theoretical and corresponding practical part in which all new deﬁnitions and construction techniques are implemented (programmed). The practical part extends and builds upon a framework in Java, designed and implemented specially for this course. The last 4-5 slots of the course are used to deepen the basics by exploring diﬀerent topics. These advanced topics are discussed and shared among groups of 3-4 students, who work in parallel on these topics in a project-like manner. Results and experiences are presented and shared with all other groups in the last slot of the course. In this last phase of the course, students can practice how to apply the basics from the lecture to learn and implement new deﬁnitions and construction techniques from standard literature and academic sources.",
                         "assessment_modalities": "Oral exam (ca. 40 Minutes) The responsible lecturer announces type and duration of assessment modalities in the ﬁrst three weeks of the lecture period at latest.",
                         "partial_module_exams": "none",
                         "course_achievement": "Studienleistung: written exercises The responsible lecturer announces the requirements for course achievements in the ﬁrst three weeks of the lecture period at latest.",
                         "prerequisites_for_participation_in_module_exam": "Passing of course achievement.",
                         "prerequisites_for_obtaining_credits": "Passing of module exam.",
                         "weight_for_overall_grade": "The module is weighted with 6 credits.",
                         "person_responsible_for_the_module": "Jun.-Prof.Dr. Anthony Anjorin",
                         "learning_material,_literature": "Fundamentals of Model-Driven Engineering: Ehrig, H., Ehrig, K., Prange, U., & Taentzer, G. (2006). Fundamentals of Algebraic Graph Transformation. (W. Brauer, G. Rozenberg, & A. Salomaa, Eds.). Springer. Awodey, S. (2006). Category Theory. Ebsco Publishing.",
                         "remarks": "none"
                    }
               },
               {
                    "chapter": "3.23",
                    "title": "Future Internet",
                    "page": 60,
                    "type": "Elective Module",
                    "count": 2,
                    "items": {
                         "module_name": "Future Internet / Future Internet",
                         "workload": "180 h",
                         "credits": "6 LP",
                         "semester": "• Future Internet : arbitrary",
                         "course_teaching_form": "Future Internet: Lecture ( 45h / 105h / EN / SS / 20 ) Future Internet: Tutorial ( 30h / 0h / EN / SS / 20 )",
                         "choices_in_module": "none",
                         "course_prerequiites": "none",
                         "recommended_proﬁciencies": "Future Internet: Basic knowledge of computer networks is required, e.g., a Bachelor-level class “Com- puter networks”.",
                         "content": "Future Internet: This lecture deals with up-to-date, close-to-research developments in the Future Inter- net context as well as data center (networking) context. The lecture is dynamically updated to reﬂect current research and is predominantly based on research publications.",
                         "learning_objectives": "Participants of this class are introduced to the current state of the art in Internet research. They know weaknesses of today’s architecture, can criticize them and contrast them with current proposals as well as discuss and assess advantages and disadvantages. For diﬀerent usage scenarios, they can predict the suitability of diﬀerent solution proposals. Methodically, they can design and execute networking experiments. Participants can create new Internet protocols and synthesize them into new architectures; they can compare such creations with competing approaches and assess and decide for a superior solution. Since the lecture is based on scientiﬁc publications, participants are able to make use of original work that has not been didactically prepared.",
                         "implementation_method": "Future Internet: Lecture with slides and blackboard; homework assignments. The homework assign- ments will include architecture experiments, e.g., based on OpenFlow.",
                         "assessment_modalities": "Oral exam (ca. 40 Minutes) The responsible lecturer announces type and duration of assessment modalities in the ﬁrst three weeks of the lecture period at latest.",
                         "partial_module_exams": "none",
                         "course_achievement": "Studienleistung: written exercises The responsible lecturer announces the requirements for course achievements in the ﬁrst three weeks of the lecture period at latest.",
                         "prerequisites_for_participation_in_module_exam": "Passing of course achievement.",
                         "prerequisites_for_obtaining_credits": "Passing of module exam.",
                         "weight_for_overall_grade": "The module is weighted with 6 credits.",
                         "person_responsible_for_the_module": "Prof. Dr. rer. nat. Holger Karl",
                         "learning_material,_literature": "Future Internet: Foliensatz, insbesondere auch aktuelle Ver¨oﬀentlichungen. Kein umfassendes Lehrbuch verfu¨gbar, Teile abgedeckt durch Stallings, Foundations of Modern Networking: SDN, NFV, QoE, IoT, and Cloud.",
                         "remarks": "none"
                    }
               },
               {
                    "chapter": "3.24",
                    "title": "General Studies",
                    "page": 62,
                    "type": "Mandatory Module",
                    "count": 2,
                    "items": {
                         "module_name": "General Studies / General Studies",
                         "workload": "360 h",
                         "credits": "12 LP",
                         "semester": "• Studium Generale : arbitrary",
                         "course_teaching_form": "General Studies: Lecture ( 90h / 225h / DE / WS / 30 ) General Studies: Tutorial ( 45h / 0h / DE / WS / 30 )",
                         "choices_in_module": "none",
                         "course_prerequiites": "none",
                         "recommended_proﬁciencies": "General Studies:",
                         "content": "General Studies:",
                         "learning_objectives": "",
                         "implementation_method": "General Studies:",
                         "assessment_modalities": "Exam in general studies The responsible lecturer announces type and duration of assessment modalities in the ﬁrst three weeks of the lecture period at latest.",
                         "partial_module_exams": "none",
                         "course_achievement": "Qualiﬁzierte Teilnahme: Qualifying participation in general studies The responsible lecturer announces the requirements for course achievements in the ﬁrst three weeks of the lecture period at latest.",
                         "prerequisites_for_participation_in_module_exam": "none",
                         "prerequisites_for_obtaining_credits": "Passing of module exam.",
                         "weight_for_overall_grade": "The module is weighted with 4 credits.",
                         "person_responsible_for_the_module": "Dozenten der Universita¨t Paderborn",
                         "learning_material,_literature": "Studium Generale: Abh¨angig von den gewa¨hlten Veranstaltungen.",
                         "remarks": "none"
                    }
               },
               {
                    "chapter": "3.25",
                    "title": "Hardware/Software Codesign",
                    "page": 64,
                    "type": "Elective Module",
                    "count": 2,
                    "items": {
                         "module_name": "Hardware/Software Codesign / Hardware/Software Codesign",
                         "workload": "180 h",
                         "credits": "6 LP",
                         "semester": "• Hardware/Software Codesign : arbitrary",
                         "course_teaching_form": "Hardware/Software Codesign: Lecture ( 45h / 105h / EN / SS / 40 ) Hardware/Software Codesign: Tutorial ( 30h / 0h / EN / SS / 20 )",
                         "choices_in_module": "none",
                         "course_prerequiites": "none",
                         "recommended_proﬁciencies": "Hardware/Software Codesign: Digital design, computer architecture, programming skills",
                         "content": "Hardware/Software Codesign: Hardware/Software Codesign denotes the integrated and automated de- sign of hardware and software in computer systems. The course Hardware/Software Codesign teaches concepts and methods that are used in computer aided design tools for design-space exploration, design optimization, and compilation for specialized computer systems.",
                         "learning_objectives": "Participants of this course can name the goals and challenges in the design of specialized computer systems. They are able to chose the suitable modeling approaches for a given HW/SW system and its functional and non-functional requirements and to create a speciﬁcation in the selected formalism. They can characterize target architectures for the implementation of HW/SW systems and evaluate the suitability of a given application. They are able to describe the design of a compiler, to understand and apply basic blocks and control-ﬂow graphs, and to discuss optimization and code generation methods. They are able to demonstrate how programs are translated to hardware using high-level synthesis methods. The understand the integer linear programming method and can apply it to problems from the domain of synthesis, scheduling and software performance estimation.",
                         "implementation_method": "Hardware/Software Codesign: • Lecture with projected slides and notes on blackboard • Interactive assignments in lecture room • Self-study and discussion of scientiﬁc publications • Practical programming projects for applying methods of the area Hardware/Software Codesign",
                         "assessment_modalities": "Oral exam (ca. 40 Minutes) The responsible lecturer announces type and duration of assessment modalities in the ﬁrst three weeks of the lecture period at latest.",
                         "partial_module_exams": "none",
                         "course_achievement": "Studienleistung: written exercises The responsible lecturer announces the requirements for course achievements in the ﬁrst three weeks of the lecture period at latest.",
                         "prerequisites_for_participation_in_module_exam": "Passing of course achievement.",
                         "prerequisites_for_obtaining_credits": "Passing of module exam.",
                         "weight_for_overall_grade": "The module is weighted with 6 credits.",
                         "person_responsible_for_the_module": "Prof. Dr. Christian Plessl",
                         "learning_material,_literature": "Hardware/Software Codesign: Folien, Standardlehrbu¨cher, U¨ bungsbla¨tter, Wissenschaftliche Artikel",
                         "remarks": "none"
                    }
               },
               {
                    "chapter": "3.26",
                    "title": "High-Performance Computing",
                    "page": 66,
                    "type": "Elective Module",
                    "count": 2,
                    "items": {
                         "module_name": "High-Performance Computing / High-Performance Computing",
                         "workload": "180 h",
                         "credits": "6 LP",
                         "semester": "• High-Performance Computing : arbitrary",
                         "course_teaching_form": "High-Performance Computing: Lecture ( 30h / 105h / EN / WS / 40 ) High-Performance Computing: Tutorial ( 45h / 0h / EN / WS / 40 )",
                         "choices_in_module": "none",
                         "course_prerequiites": "none",
                         "recommended_proﬁciencies": "High-Performance Computing: • Programming skills in C/C++ • Computer architecture",
                         "content": "High-Performance Computing: This course teaches the foundations of high-performance computing with an emphasis on the programming of parallel computer systems and novel hardware accelerators.",
                         "learning_objectives": "After attending this course, the students are able to • name models and programming patterns for HPC and to select patterns for a given application, • name and apply the basic constructs of frequently used HPC libraries, in particular, MPI, OpenMP and OpenCL, • analyze the performance of applications by using proﬁling tools and use the gathered information to create a systematic optimization strategy, • apply the taught concepts and methods for parallelizing and optimizing existing applications",
                         "implementation_method": "High-Performance Computing: • Lecture with projected slides and blackboard notes • Interactive assignments in lecture room • Practical programming projects on parallel computer systems (teamwork in small groups)",
                         "assessment_modalities": "Oral exam (ca. 40 Minutes) The responsible lecturer announces type and duration of assessment modalities in the ﬁrst three weeks of the lecture period at latest.",
                         "partial_module_exams": "none",
                         "course_achievement": "Studienleistung: written exercises The responsible lecturer announces the requirements for course achievements in the ﬁrst three weeks of the lecture period at latest.",
                         "prerequisites_for_participation_in_module_exam": "Passing of course achievement.",
                         "prerequisites_for_obtaining_credits": "Passing of module exam.",
                         "weight_for_overall_grade": "The module is weighted with 6 credits.",
                         "person_responsible_for_the_module": "Prof. Dr. Christian Plessl",
                         "learning_material,_literature": "High-Performance Computing: • Vorlesungsfolien • U¨ bungsbla¨tter • Aufgabenbla¨tter und technische Dokumentation fu¨r die Programmierprojekte • Lehrbuch: Pacheco: An Introduction to Parallel Programming. Morgan Kaufmann, 2011.",
                         "remarks": "none"
                    }
               },
               {
                    "chapter": "3.27",
                    "title": "Intelligence in Embedded Systems",
                    "page": 68,
                    "type": "Elective Module",
                    "count": 2,
                    "items": {
                         "module_name": "Intelligence in Embedded Systems / Intelligence in Embedded Systems",
                         "workload": "180 h",
                         "credits": "6 LP",
                         "semester": "• Intelligenz in eingebetteten Systemen : arbitrary",
                         "course_teaching_form": "Intelligence in Embedded Systems: Lecture ( 45h / 105h / EN / SS / 25 ) Intelligence in Embedded Systems: Tutorial ( 30h / 0h / EN / SS / 25 )",
                         "choices_in_module": "none",
                         "course_prerequiites": "none",
                         "recommended_proﬁciencies": "Intelligence in Embedded Systems:",
                         "content": "Intelligence in Embedded Systems: Intelligent embedded systems are technical systems that use diﬀerent sensors and actors to perceive their environment and interact with it in a (partly) autonomous way. Often their behavior is controlled by methods and algorithms from artiﬁcial intelligence (AI). Such methods enable for instance that systems plan their behavior in a goal directed manner or optimize it via self-adaptation and learning. Systems of that kind are becoming increasingly important, not only on a scientiﬁc level but also in a social context: Autonomous or semi-autonomous systems such as service robots, self-driving cars or medical help and diagnosis systems will have a deep impact on our future private and professional life. This course covers important aspects for the development of intelligent embedded systems and conveys corresponding theoretical and methodological foundations. This includes lectures on architectures, intelligent sensor processing, environment modelling, intelligent behavior control and self-adaptation.",
                         "learning_objectives": "Students know and explain methods and algorithms for intelligent sensor processing and control of ac- tions (e.g. computer vision, sensor fusion, maps, navigation, planning and machine learning). They un- derstand and solve problems arising when realizing them in embedded systems with restricted resources. Furthermore, they are able to understand, use and adapt new methods and algorithms especially in the context of embedded systems.",
                         "implementation_method": "Intelligence in Embedded Systems: • Lecture with slides • Interactive exercises, where students deepen their understanding and apply their knolwledge obtained in the lectures",
                         "assessment_modalities": "Oral exam (ca. 40 Minutes) The responsible lecturer announces type and duration of assessment modalities in the ﬁrst three weeks of the lecture period at latest.",
                         "partial_module_exams": "none",
                         "course_achievement": "none",
                         "prerequisites_for_participation_in_module_exam": "none",
                         "prerequisites_for_obtaining_credits": "Passing of module exam.",
                         "weight_for_overall_grade": "The module is weighted with 6 credits.",
                         "person_responsible_for_the_module": "Dr. Bernd Kleinjohann",
                         "learning_material,_literature": "Intelligenz in eingebetteten Systemen: Folien, Publikationen, Bu¨cher: • St. Russel, P. Norvig: Artiﬁcial Intelligence: A Modern Approach • R. Arkin: Behavior-Based Robotics Weitere Literatur (Bu¨cher, Publikationen) werden in der Vorlesung bekanntgegeben.",
                         "remarks": "none"
                    }
               },
               {
                    "chapter": "3.28",
                    "title": "Interactive Data Visualization",
                    "page": 70,
                    "type": "Elective Module",
                    "count": 2,
                    "items": {
                         "module_name": "Interactive Data Visualization / Interactive Data Visualization",
                         "workload": "180 h",
                         "credits": "6 LP",
                         "semester": "• Interaktive Datenvisualisierung : arbitrary",
                         "course_teaching_form": "Interactive Data Visualization: Lecture ( 30h / 105h / EN / SS / 30 ) Interactive Data Visualization: Tutorial ( 15h / 0h / EN / SS / 30 ) Interactive Data Visualization: Visualization Project ( 30h / 0 h / EN / SS / 30 )",
                         "choices_in_module": "none",
                         "course_prerequiites": "none",
                         "recommended_proﬁciencies": "Interactive Data Visualization: Good programming skills with at least one graphics API.",
                         "content": "Interactive Data Visualization: The ﬁeld of visualization seeks to determine and present underlying correlated structures and relationships in data sets from a wide variety of application areas. The prime objective of the presentation is to communicate the information in a dataset so as to enhance understanding for the human viewer. In this context, a visualization (result) is a computer generated image or collection of images, using a computer representation of data as its primary source and a human as its primary target. Thus the visualization process becomes a mapping process from data to expressive and eﬀective (visual) representations.",
                         "learning_objectives": "Students can explain the visualization process along the Four-Component-Model (Reality, Data, Pic- ture(s), User). Students demonstrate the ability, to explain all computational steps for selective al- gorithms for data preprocessing and analysis (e.g. transfer functions, ﬁltering, statistical analysis, sampling, scaling) and to implement these algorithms with a modern API. They are able to judge the power of APIs and tools for their use in visualization. For diﬀerent data types and model, multiple visualization techniques can be enumerated and explained. Students have acquired the ability to judge their own and other visualization results in terms of expressiveness, eﬀectiveness, suitability and scala- bility. Evaluation methods to utilize during the visualization process can be enumerated and explained. The design process (mapping from data variables to visual variables) can be discussed in a qualiﬁed manner, including inﬂuencing properties of user, data or hardware. Students demonstrate their skills by - developing solutions for visualization problems in one or more application areas (e.g. medicine, astrophysics, computer-network analysis, text corpora analysis) in a modern computer environments - presenting solutions in a technically clear and motivating presentation.",
                         "implementation_method": "Interactive Data Visualization: Beamer and board are used in lectures. Students receive short in-class exercises to instigate a subsequent discussion on possible solutions. Students solve homework problems on their own, their solutions are being presented and discussed in lab time. During the last third of the course, students work on a group project. They present their solutions and evaluate each others’ projects.",
                         "assessment_modalities": "Oral exam (ca. 40 Minutes) The responsible lecturer announces type and duration of assessment modalities in the ﬁrst three weeks of the lecture period at latest.",
                         "partial_module_exams": "none",
                         "course_achievement": "Studienleistung: written exercises The responsible lecturer announces the requirements for course achievements in the ﬁrst three weeks of the lecture period at latest.",
                         "prerequisites_for_participation_in_module_exam": "Passing of course achievement.",
                         "prerequisites_for_obtaining_credits": "Passing of module exam.",
                         "weight_for_overall_grade": "The module is weighted with 6 credits.",
                         "person_responsible_for_the_module": "Prof. Dr. Gitta Domik-Kienegger",
                         "learning_material,_literature": "Interaktive Datenvisualisierung: Foliensatz der Vorlesung; Textbuch ”Interactive Data Visualization”, M. Ward, G. Grinstein, D. Keim, A K Peters.",
                         "remarks": "none"
                    }
               },
               {
                    "chapter": "3.29",
                    "title": "Language-Based Security",
                    "page": 72,
                    "type": "Elective Module",
                    "count": 2,
                    "items": {
                         "module_name": "Language-Based Security / Language-Based Security",
                         "workload": "180 h",
                         "credits": "6 LP",
                         "semester": "• Sprachbasierte Sicherheit : arbitrary",
                         "course_teaching_form": "Language-Based Security: Lecture ( 45h / 105h / EN / WS / 25 ) Language-Based Security: Tutorial ( 30h / 0h / EN / WS / 25 )",
                         "choices_in_module": "none",
                         "course_prerequiites": "none",
                         "recommended_proﬁciencies": "Language-Based Security: Basic knowledge on compilers, programming languages, and security. (For example, through the lectures “Programming Languages and Compilers” and “IT Security”.)",
                         "content": "Language-Based Security: This lecture will discuss current topics in language-based security from both, practical and theoretical perspective.",
                         "learning_objectives": "Students will acquire fundamental knowledge about current attacks and defenses. Discussion of the techniques comprises both elements, theoretical results as well as practical implementation considera- tions. In addition to factual knowledge about attacks and defenses, students acquire knowledge about the underlying principles of programming languages. In consequence, students are equipped with tools and techniques to solve relevant securtiy questions in a sound fashion.",
                         "implementation_method": "Language-Based Security:",
                         "assessment_modalities": "Oral exam (ca. 40 Minutes) The responsible lecturer announces type and duration of assessment modalities in the ﬁrst three weeks of the lecture period at latest.",
                         "partial_module_exams": "none",
                         "course_achievement": "Studienleistung: written exercises The responsible lecturer announces the requirements for course achievements in the ﬁrst three weeks of the lecture period at latest.",
                         "prerequisites_for_participation_in_module_exam": "Passing of course achievement.",
                         "prerequisites_for_obtaining_credits": "Passing of module exam.",
                         "weight_for_overall_grade": "The module is weighted with 6 credits.",
                         "person_responsible_for_the_module": "Prof.Dr. Stefan Brunthaler",
                         "learning_material,_literature": "Sprachbasierte Sicherheit: none",
                         "remarks": "none"
                    }
               },
               {
                    "chapter": "3.30",
                    "title": "Linear and Integer Optimization",
                    "page": 74,
                    "type": "Elective Module",
                    "count": 2,
                    "items": {
                         "module_name": "Linear and Integer Optimization / Linear and Integer Optimization",
                         "workload": "180 h",
                         "credits": "6 LP",
                         "semester": "• Linear and Integer Optimization : arbitrary",
                         "course_teaching_form": "Linear and Integer Optimization: Lecture ( 45h / 105h / EN / WS / 30 ) Linear and Integer Optimization: Tutorial ( 30h / 0h / EN / WS / 30 )",
                         "choices_in_module": "none",
                         "course_prerequiites": "none",
                         "recommended_proﬁciencies": "Linear and Integer Optimization: Algorithms and Data Structures Linear Algebra",
                         "content": "Linear and Integer Optimization: Nowadays, optimization problems are an omnipresent part of our daily life in industry, trade and commerce. Mostly, optimization deals with the management and eﬃcient use of scarce or expensive resources, e.g. in transportation, scheduling, planning, or design problems. Many of these optimization problems are NP-hard and thus cannot be solved eﬃciently. Surprisingly, many optimization problems can naturally be modelled as linear programs (LP) or integer programs (IP) and algorithms and techniques to solve LPs or IPs perform excellent in ﬁnding solutions of these models. This lecture contains a fundamental introduction to linear and interger optimization. We will deal with techniques to model optimization problems as LP/IP. We will present algorithms for the solution of these models and succinctly analyse their behaviour. Furthermore, for IPs we will analyze polynomially solvable special cases and give examples for heuristics to increase the eﬃciency of the solvers in the general case. Kexwords: Simplex algorithm, Interior Point Method, Cutting Planes, Branch & Bound Algorithm, Branch & Cut",
                         "learning_objectives": "Students get to know fundamental modelling techniques for optimization problems. They are able to identify suitable models for a given optimiazion problem from application and they can distinguish between eﬃciently solvable models and others. For linear and integer programs the students know fundamental algorithms as well as various techniques to speed up their computation. Furthermore, students are able to use commercial as well as uncommercial LP/IP solvers.",
                         "implementation_method": "Linear and Integer Optimization: Lecture with tutorials",
                         "assessment_modalities": "Oral exam (ca. 40 Minutes) The responsible lecturer announces type and duration of assessment modalities in the ﬁrst three weeks of the lecture period at latest.",
                         "partial_module_exams": "none",
                         "course_achievement": "Studienleistung: written exercises The responsible lecturer announces the requirements for course achievements in the ﬁrst three weeks of the lecture period at latest.",
                         "prerequisites_for_participation_in_module_exam": "Passing of course achievement.",
                         "prerequisites_for_obtaining_credits": "Passing of module exam.",
                         "weight_for_overall_grade": "The module is weighted with 6 credits.",
                         "person_responsible_for_the_module": "Dr. Rainer Feldmann",
                         "learning_material,_literature": "Linear and Integer Optimization: Folien, Skript Literatur: M. Conforti, G. Cornuejols, G. Zambelli. Integer Programming. Springer 2014. A. Schrijver. Combinatorial Optimization: Polyhedra and Eﬃciency, Vol. A,B,C. Springer 2003. V. Chvatal. Linear Programming. Freeman 1983. L.A. Nemhauser, G.L. Wolsey. Integer and Combinatorial Optimization. Wiley 1999. A. Schrijver. Theory of Linear and Integer Optimization. Wiley, 1999.",
                         "remarks": "none"
                    }
               },
               {
                    "chapter": "3.31",
                    "title": "Logic and Automated Reasoning",
                    "page": 76,
                    "type": "Elective Module",
                    "count": 2,
                    "items": {
                         "module_name": "Logic and Automated Reasoning / Logic and Automated Reasoning",
                         "workload": "180 h",
                         "credits": "6 LP",
                         "semester": "• Logik und automatisches Beweisen : arbitrary",
                         "course_teaching_form": "Logic and Automated Reasoning: Lecture ( 45h / 105h / EN / WS / 30 ) Logic and Automated Reasoning: Tutorial ( 30h / 0h / EN / WS / 15 )",
                         "choices_in_module": "none",
                         "course_prerequiites": "none",
                         "recommended_proﬁciencies": "Logic and Automated Reasoning: Basics of symbolic modeling, basics of computational complexity theory",
                         "content": "Logic and Automated Reasoning: The course ”Logic and Automated Reasoning” is dedicated to un- derstanding diﬀerent aspects of reasoning. Basis for automated reasoning is a symbolic representation of knowledge on problem domains. For this purpose, classical logics and other examples of logic-based languages are introduced and their expressiveness is explored. For these formal languages, adequate inference engines and underlying calculi are presented and analyzed. In particular, the relationship be- tween propositional logics and ﬁrst-order logics will be considered. Topics discussed include soundness, (in-) completeness, and (non-) monotonicity.",
                         "learning_objectives": "The students are able to • name, describe, and valuate logic-based laguages for knowledge representation, • specify knowledge and tasks using a logic-based symbolic formalism, • describe seveal calculi and corresponding inference algorithms, • choose and apply approriate inference methods, • assess the complexity of tasks and the runtimes of inference algorithms based on a rough scaling.",
                         "implementation_method": "Logic and Automated Reasoning: • Lecture • Tutorials • Discussions • Homework Assignments",
                         "assessment_modalities": "Oral exam (ca. 40 Minutes) The responsible lecturer announces type and duration of assessment modalities in the ﬁrst three weeks of the lecture period at latest.",
                         "partial_module_exams": "none",
                         "course_achievement": "Studienleistung: written exercises The responsible lecturer announces the requirements for course achievements in the ﬁrst three weeks of the lecture period at latest.",
                         "prerequisites_for_participation_in_module_exam": "Passing of course achievement.",
                         "prerequisites_for_obtaining_credits": "Passing of module exam.",
                         "weight_for_overall_grade": "The module is weighted with 6 credits.",
                         "person_responsible_for_the_module": "Dr. Theodor Lettmann",
                         "learning_material,_literature": "Logik und automatisches Beweisen: • Vorlesungsfolien • Lehrbu¨cher: 1.) J. Harrison: Handbook of Practical Logic and Automated Reasoning, Cambridge University Press, 2009, 2.) M. Fitting: First-Order Logic and Automated Theorem Proving, 2nd ed., Springer 1995, 3.) j.H. Gallier: Logic for Computer Science: Foundations of Automatic Theorem Proving, 2nd ed., Dover, 2015, 4.) L. Wos, G. W. Pieper. A Fascinating Country in the World of Computing: Your Guide to Automated Reasoning, World Scientiﬁc, 1999. • U¨ bungsaufgaben • Liste von klassischen und aktuellen Papieren, z.B. D. W. Loveland. Mechanical theorem-proving by model elimination, Journal of the ACM,15, pp. 236–251, 1968",
                         "remarks": "none"
                    }
               },
               {
                    "chapter": "3.32",
                    "title": "Logic Programming for Artiﬁcial Intelligence",
                    "page": 78,
                    "type": "Elective Module",
                    "count": 2,
                    "items": {
                         "module_name": "Logic Programming for Artiﬁcial Intelligence / Logic Programming for Artiﬁcial Intelligence",
                         "workload": "180 h",
                         "credits": "6 LP",
                         "semester": "• Logic Programming for Artiﬁcial Intelligence : arbitrary",
                         "course_teaching_form": "Logic Programming for Artiﬁcial Intelligence: Lecture ( 45h / 105h / EN / WS oder SS / 40 ) Logic Programming for Artiﬁcial Intelligence: Tutorial ( 30h / 0h / EN / WS oder SS / 20 )",
                         "choices_in_module": "none",
                         "course_prerequiites": "none",
                         "recommended_proﬁciencies": "Logic Programming for Artiﬁcial Intelligence: Students should have previous knowledge in programming as oﬀered in the courses ”Programmierung” and ”GPS” and knowledge in database query languages as oﬀered in the course ”Datenbanksysteme”.",
                         "content": "Logic Programming for Artiﬁcial Intelligence: This course views various concepts and techniques from computer science, artiﬁcial intelligence, and computational linguistics from a diﬀerent perspective, i.e. the perspective of programming in logic. Programming in logic in general and the programming language Prolog in particular oﬀer the ability to describe many concepts in logic, i.e. in a declarative way, and to have them tested and executed by an interpreter at a same time. This is in particular useful for puzzles and quizes, but also for self-deﬁned or domain speciﬁc languages.",
                         "learning_objectives": "Students learn factual knowledge about • the transformation of knowledge given as facts and rules into an executable programs • how to program in logic and in self-designed languages methodological knowledge, including • the ability to deﬁne domain speciﬁc languages • the ability to implement interpreters for domain speciﬁc languages • the ability to develop small question answering systems • the ability to develop software for theorem provers or constraint solvers solving puzzles transfer skills • the ability to transfer the methodolies and skills gained to other data sources, knowledge representa- tion formats, or calculi • the ability to transfer the parsing and semantics knowledge to domain speciﬁc languages normative evaluation skills including the ability to assess • the suitability and limitations of diﬀerent data and knowledgerepresentation formats for diﬀerent tasks • the suitability of diﬀerent programming paradigms for diﬀerent projects • the eﬀort and feasibility of projects aiming natural language understanding • the eﬀort and feasibility of projects aiming at automated translation",
                         "implementation_method": "Logic Programming for Artiﬁcial Intelligence: The theoretical concepts are explained in the lectures and consolidated in small groups during tutorials. The tutorials are carried out as practical exercises on the computer.",
                         "assessment_modalities": "Oral exam (ca. 40 Minutes) The responsible lecturer announces type and duration of assessment modalities in the ﬁrst three weeks of the lecture period at latest.",
                         "partial_module_exams": "none",
                         "course_achievement": "Studienleistung: written exercises The responsible lecturer announces the requirements for course achievements in the ﬁrst three weeks of the lecture period at latest.",
                         "prerequisites_for_participation_in_module_exam": "Passing of course achievement.",
                         "prerequisites_for_obtaining_credits": "Passing of module exam.",
                         "weight_for_overall_grade": "The module is weighted with 6 credits.",
                         "person_responsible_for_the_module": "Prof. Dr. Stefan Bo¨ttcher",
                         "learning_material,_literature": "Logic Programming for Artiﬁcial Intelligence: Ivan Bratko: Prolog Programming for Artiﬁcial Intel- ligence. Pearson Education, Newest Edition. Hinweise auf weiteres Material werden in der Lehrver- anstaltung bekannt gegeben.",
                         "remarks": "none"
                    }
               },
               {
                    "chapter": "3.33",
                    "title": "Machine Learning I",
                    "page": 80,
                    "type": "Elective Module",
                    "count": 2,
                    "items": {
                         "module_name": "Machine Learning I / Machine Learning I",
                         "workload": "180 h",
                         "credits": "6 LP",
                         "semester": "• Maschinelles Lernen I : arbitrary",
                         "course_teaching_form": "Machine Learning I: Lecture ( 45h / 105h / EN / WS oder SS / 60 ) Machine Learning I: Tutorial ( 30h / 0h / EN / WS oder SS / 20 )",
                         "choices_in_module": "none",
                         "course_prerequiites": "none",
                         "recommended_proﬁciencies": "Machine Learning I: Basic knowledge in mathematics (linear algebra, statistics), programming and algorithms.",
                         "content": "Machine Learning I: Due to the ever increasing amount of data that is routinely produced in our information society, the topic of machine learning has become increasingly important in the recent years, not only as a scientiﬁc discipline but also as a key technology of modern software and intelligent systems. This lecture provides an introduction to the topic of machine learning, with a speciﬁc focus on supervised learning for classiﬁcation and regression. The lecture covers theoretical foundations of generalisation as well as practical topics and concrete learning algorithms.",
                         "learning_objectives": "The students understand the statistical foundations of generalisation, i.e., the induction of models from data, as well as practical tools for model validation. They are able to apply basic methods of supervised learning to problems of classiﬁcation and regression.",
                         "implementation_method": "Machine Learning I: Theoretical foundations and concepts of machine learning will be taught in the form of a lecture and deepened in practical exercise courses, group work as well as individual homework.",
                         "assessment_modalities": "Oral exam (ca. 40 Minutes) The responsible lecturer announces type and duration of assessment modalities in the ﬁrst three weeks of the lecture period at latest.",
                         "partial_module_exams": "none",
                         "course_achievement": "Studienleistung: written exercises The responsible lecturer announces the requirements for course achievements in the ﬁrst three weeks of the lecture period at latest.",
                         "prerequisites_for_participation_in_module_exam": "Passing of course achievement.",
                         "prerequisites_for_obtaining_credits": "Passing of module exam.",
                         "weight_for_overall_grade": "The module is weighted with 6 credits.",
                         "person_responsible_for_the_module": "Prof. Dr. Eyke Hu¨llermeier",
                         "learning_material,_literature": "Maschinelles Lernen I: Skript und eine Liste mit Buchempfehlungen: • Y.S. Abu-Mostafa, M. Magdon-Ismail, H.T. Lin. Learning from Data, AMLBook, 2012. • P. Flach. Machine Learning, Cambridge Univ. Press, 2012. • E. Alpaydin. Machine Learning, Oldenbourg, 2008. • C.M. Bishop. Pattern Recognition and Machine Learning, Springer, 2006.",
                         "remarks": "none"
                    }
               },
               {
                    "chapter": "3.34",
                    "title": "Machine Learning II",
                    "page": 82,
                    "type": "Elective Module",
                    "count": 2,
                    "items": {
                         "module_name": "Machine Learning II / Machine Learning II",
                         "workload": "180 h",
                         "credits": "6 LP",
                         "semester": "• Maschinelles Lernen II : arbitrary",
                         "course_teaching_form": "Machine Learning II: Lecture ( 45h / 105h / EN / WS oder SS / 20 ) Machine Learning II: Tutorial ( 30h / 0h / EN / WS oder SS / 20 )",
                         "choices_in_module": "none",
                         "course_prerequiites": "none",
                         "recommended_proﬁciencies": "Machine Learning II: Basic knowledge in machine learning (as conveyed, for example, by the Machine Learning I lecture).",
                         "content": "Machine Learning II: This lecture, which is conceived as a continuation of the Machine Learning I, covers advanced topics in contemporary machine learning research, such as reinforcement learning, online learning and bandit algorithms, multi-task learning, multi-target and structured output prediction, preference learning, learning from weak supervision, and uncertainty in machine learning. The focus of the lecture will be on methods and algorithms, though theoretical issues and applications will be addressed, too.",
                         "learning_objectives": "The students have an overview of methods for multi-class classiﬁcation, the learning of nonlinear models, and extensions of the simple setting of supervised learning. They understand algorithmic concepts of corresponding methods and are able to apply them to real problems.",
                         "implementation_method": "Machine Learning II: Theoretical foundations and concepts of machine learning will be taught in the form of a lecture and deepened in practical exercise courses, group work as well as individual homework.",
                         "assessment_modalities": "Oral exam (ca. 40 Minutes) The responsible lecturer announces type and duration of assessment modalities in the ﬁrst three weeks of the lecture period at latest.",
                         "partial_module_exams": "none",
                         "course_achievement": "Studienleistung: written exercises The responsible lecturer announces the requirements for course achievements in the ﬁrst three weeks of the lecture period at latest.",
                         "prerequisites_for_participation_in_module_exam": "Passing of course achievement.",
                         "prerequisites_for_obtaining_credits": "Passing of module exam.",
                         "weight_for_overall_grade": "The module is weighted with 6 credits.",
                         "person_responsible_for_the_module": "Prof. Dr. Eyke Hu¨llermeier",
                         "learning_material,_literature": "Maschinelles Lernen II: Skript und eine Liste mit Buchempfehlungen: • Y.S. Abu-Mostafa, M. Magdon-Ismail, H.T. Lin. Learning from Data, AMLBook, 2012. • P. Flach. Machine Learning, Cambridge Univ. Press, 2012. • E. Alpaydin. Machine Learning, Oldenbourg, 2008. • C.M. Bishop. Pattern Recognition and Machine Learning, Springer, 2006.",
                         "remarks": "none"
                    }
               },
               {
                    "chapter": "3.35",
                    "title": "Master Thesis",
                    "page": 84,
                    "type": "Mandatory Module",
                    "count": 2,
                    "items": {
                         "module_name": "Master Thesis / Master Thesis",
                         "workload": "900 h",
                         "credits": "30 LP",
                         "semester": "• Masterarbeit : 4 • Masterararbeit Arbeitsplan : 4",
                         "course_teaching_form": "Master Thesis: ( 30h / 720 h / EN / WS oder SS / 1 ) Master Thesis Work Plan: contact hours, presentation work plan ( 30h / 120 h / EN / WS oder SS / 0)",
                         "choices_in_module": "none",
                         "course_prerequiites": "none",
                         "recommended_proﬁciencies": "Master Thesis: Depends on the thesis topic. Master Thesis Work Plan: Depends on the topic.",
                         "content": "Master Thesis: A Master Thesis consists of working on a demanding subject, including a written report and an oral presentation. With the thesis the student shows her/his ability to work independently and systematically on a demanding topic which also includes developing her/his own ideas. On a state-of- the-art basis the methods of computer science should be applied systematically.- Master Thesis Work Plan: After having agreed on a topic, the student draws up a work plan. The work plan includes the targeted results, the techniques and methods used and important milestones.",
                         "learning_objectives": "Finishing their master thesis students show that they are able • to solve a problem in computer sience within an appropriate time frame using scientiﬁcally sound Methode • to apply the techniques and methods that they learned during their studies to a new and demanding problem.",
                         "implementation_method": "Master Thesis: Independent studies supported by individual advice and supervision Master Thesis Work Plan: In agreement with supervisor.",
                         "assessment_modalities": "Final thesis The responsible lecturer announces type and duration of assessment modalities in the ﬁrst three weeks of the lecture period at latest.",
                         "partial_module_exams": "none",
                         "course_achievement": "none",
                         "prerequisites_for_participation_in_module_exam": "none",
                         "prerequisites_for_obtaining_credits": "Passing of module exam.",
                         "weight_for_overall_grade": "The module is weighted with 50 credits.",
                         "person_responsible_for_the_module": "Prof. Dr. rer. nat. Johannes Bl¨omer",
                         "learning_material,_literature": "Masterararbeit Arbeitsplan: Je nach gewa¨hltem Thema. Masterarbeit: Je nach gew¨ahltem Thema.",
                         "remarks": "none"
                    }
               },
               {
                    "chapter": "3.36",
                    "title": "Mobile Communication",
                    "page": 86,
                    "type": "Elective Module",
                    "count": 2,
                    "items": {
                         "module_name": "Mobile Communication / Mobile Communication",
                         "workload": "180 h",
                         "credits": "6 LP",
                         "semester": "• Mobilkommunikation : arbitrary",
                         "course_teaching_form": "Mobile Communication : Lecture ( 45h / 105h / EN / WS / 20 ) Mobile Communication : Tutorial ( 30h / 0h / EN / WS / 20 )",
                         "choices_in_module": "none",
                         "course_prerequiites": "none",
                         "recommended_proﬁciencies": "Mobile Communication : Basic knowledge of computer networks is required, e.g., a Bachelor-level class “Computer networks”.",
                         "content": "Mobile Communication : The lecture discusses foundations of mobile communication (e.g., wireless channel models) and fundamental techniques (e.g., spread spectrum communication), important proto- col mechanisms (e.g., medium access in wireless systems), mobile communication systems, and MobileIP. In addition to technological and conceptual aspects, we shall also discuss approaches and methods for performance evaluation of mobile communication systems.",
                         "learning_objectives": "Participants of this class know challenges and problems arising in design and operation of mobile com- munication systems. They can diﬀerentiate between challenges based in physics and those arising from a particular system design; they can choose suitable protocols or design new ones. They are able to select mechanisms from diﬀerent architectural layers, integrate them into a new complete architecture and justify their selection and integration decisions. They are also able to quantitatively evaluate protocol mechanisms.",
                         "implementation_method": "Mobile Communication : Lecture with slides and blackboard; homework assignments with (among others) some programming assignments to simulate wireless systems.",
                         "assessment_modalities": "Oral exam (ca. 40 Minutes) The responsible lecturer announces type and duration of assessment modalities in the ﬁrst three weeks of the lecture period at latest.",
                         "partial_module_exams": "none",
                         "course_achievement": "Studienleistung: written exercises The responsible lecturer announces the requirements for course achievements in the ﬁrst three weeks of the lecture period at latest.",
                         "prerequisites_for_participation_in_module_exam": "Passing of course achievement.",
                         "prerequisites_for_obtaining_credits": "Passing of module exam.",
                         "weight_for_overall_grade": "The module is weighted with 6 credits.",
                         "person_responsible_for_the_module": "Prof. Dr. rer. nat. Holger Karl",
                         "learning_material,_literature": "Mobilkommunikation: Foliensatz; einzelne Kapitel div. Standardlehrbu¨cher (J. Schiller, Mobile Com- munication, Addison Wesley, 2nd edition; D. Tse und P. Viswanath, Fundamentals of Wireless Com- munication, Cambridge University Press, 2005).",
                         "remarks": "none"
                    }
               },
               {
                    "chapter": "3.37",
                    "title": "Model Checking",
                    "page": 88,
                    "type": "Elective Module",
                    "count": 2,
                    "items": {
                         "module_name": "Model Checking / Model Checking",
                         "workload": "180 h",
                         "credits": "6 LP",
                         "semester": "• Model Checking : arbitrary",
                         "course_teaching_form": "Model Checking: Lecture ( 45h / 105h / EN / WS oder SS / 40 ) Model Checking: Tutorial ( 30h / 0h / EN / WS oder SS / 40 )",
                         "choices_in_module": "none",
                         "course_prerequiites": "none",
                         "recommended_proﬁciencies": "Model Checking: Logic, some knowledge of imperative programming, concurrency",
                         "content": "Model Checking: The course studies techniques for formally verifying that a system (software or hard- ware) is correct, i.e. adheres to requirements describing the desired functionality. For describing re- quirements a particular class of logics, so called temporal logics, is employed. Temporal logics can be used to describe properties of systems in time. For this class of logics there are algorithms for checking whether a property does or does not hold for a system. If the system under consideration has a ﬁnite state space, tools implementing these algorithms can fully automatically carry out the veriﬁcation. The course looks at two temporal logics (LTL and CTL) and their model checking algorithms.",
                         "learning_objectives": "The students are able to formally specify requirements on software or hardware system and know tools for automatically verifying these. They have understood the techniques underlying model checking algorithms and know the diﬀerences between linear-time and branching-time logics. They are able to understand new approaches in the area of veriﬁcation and can compare them with existing methods. The students are able to develop simple formal proofs themselves and can explain the proofs which are presented in the lectures.",
                         "implementation_method": "Model Checking: Partially slides and partially board writing. All essential concepts and techniques will be repeatedly applied in examples during the tutorial. In a lab part, the techniques will be employed using the modelchecker Spin.",
                         "assessment_modalities": "Oral exam (ca. 40 Minutes) The responsible lecturer announces type and duration of assessment modalities in the ﬁrst three weeks of the lecture period at latest.",
                         "partial_module_exams": "none",
                         "course_achievement": "Studienleistung: written exercises The responsible lecturer announces the requirements for course achievements in the ﬁrst three weeks of the lecture period at latest.",
                         "prerequisites_for_participation_in_module_exam": "Passing of course achievement.",
                         "prerequisites_for_obtaining_credits": "Passing of module exam.",
                         "weight_for_overall_grade": "The module is weighted with 6 credits.",
                         "person_responsible_for_the_module": "Prof. Dr. Heike Wehrheim",
                         "learning_material,_literature": "Model Checking: Christel Baier, Joost-Pieter Katoen: Principles of Model Checking Vorlesungsfolien, U¨ bungsaufgaben",
                         "remarks": "none"
                    }
               },
               {
                    "chapter": "3.38",
                    "title": "Model-Based Interface Development",
                    "page": 90,
                    "type": "Elective Module",
                    "count": 3,
                    "items": {
                         "module_name": "Model-Based Interface Development / Model-Based Interface Develop- ment",
                         "workload": "180 h",
                         "credits": "6 LP",
                         "semester": "• Modellbasierte Entwicklung von Benutzungsschnittstellen : arbitrary",
                         "course_teaching_form": "Model-Based Interface Development: Lecture ( 45h / 105h / EN / WS oder SS / 40 ) Model-Based Interface Development: Tutorial ( 30h / 0h / EN / WS oder SS / 40 )",
                         "choices_in_module": "none",
                         "course_prerequiites": "none",
                         "recommended_proﬁciencies": "Model-Based Interface Development: The class does not need more knowledge than what is provided through the preceding Bachelor study.",
                         "content": "Model-Based Interface Development: The class starts by dealing with the concept of modelling in a ”Computer Science” way as such. Models are referred here with the following deﬁnition: ”A model is an artefact, such as a drawing, a text, or a physical object supposed to reﬂect or represent certain relevant aspects of a real system.” Based on this deﬁnition a series of diﬀerent types of artefacts relevant under certain aspects are covered. This starts with task modelling, where we look into several task modelling approaches, including some tools to work with. Then we enter the area of dialogue models, which are divided into two distinct groups - the user interaction models and the control models. The two types describe ”the same thing”, with diﬀerent goals and results. This chapter deals with several approaches and their interconnections, if applicable by looking at corresponding tools. The class ﬁnishes with describing a model-based user interface design process. These insights are then applied to the ﬁeld of webmodelling. The problems are basically the same as for classical user interfaces, but in the literature alternative modelling approaches are presented and used. We look into domain model, navigation model and presentation model, and deal with approaches which are only theoretically interesting, but also use intensively the commercially used and very successfull web modelling platform WebRatio.",
                         "learning_objectives": "Factual knowledge: The class teaches formal systems, which are used during a modelling process. It becomes clear, which aspect relevant for user interface or web design, can be treated with which model on which abstraction level. We cover generic basic knowledge, but also specialized approaches for the web. Methods: The students learn to apply modelling approaches in practice. We present prototypical, academic approaches, as well as commercially used ones. Their use is practiced in the exercises. Transfer knowledge: The students learn to use formal systems in realistic design scenarios. Evaluative: The students learn about the beneﬁts, but also the drawbacks of the concrete modelling approaches. In the end they can assess during the work on practical examples, whether it was/is worthwhile to pursue a model-based process or not, and which risks are involved.",
                         "implementation_method": "Model-Based Interface Development: The class is held as a classical lecture with beamer presentation, supported by koaLA - the e-learning environment of the university. That system is used to provide the slides of the class, written homeworks, access to software used during the class and video recordings of every lecture. During the class we have interactive meetings, groupwork in several chapters, e.g. for design work with WebRatio or the creation of complex task models. During exercise hours the students present their solutions to the homework by showing a small presentation with slides.",
                         "assessment_modalities": "Oral exam (ca. 40 Minutes) The responsible lecturer announces type and duration of assessment modalities in the ﬁrst three weeks of the lecture period at latest.",
                         "partial_module_exams": "none",
                         "course_achievement": "Studienleistung: written exercises The responsible lecturer announces the requirements for course achievements in the ﬁrst three weeks of the lecture period at latest.",
                         "prerequisites_for_participation_in_module_exam": "Passing of course achievement.",
                         "prerequisites_for_obtaining_credits": "Passing of module exam.",
                         "weight_for_overall_grade": "The module is weighted with 6 credits.",
                         "person_responsible_for_the_module": "Prof. Dr. Gerd Szwillus",
                         "learning_material,_literature": "Modellbasierte Entwicklung von Benutzungsschnittstellen: • Vorlesungsfolien als PDF zum Herunterladen • Schriftliche Hausaufgaben • Diverse, w¨ahrend der Vorlesung eingesetzte Modellierungswerkzeuge • Voller Zugang zu WebRatio • Ben Shneiderman: Designing the User Interface: Strategies for Eﬀective Human-Computer Interac- tion, 2009 • David Benyon: Designing Interactive Systems: A Comprehensive Guide to HCI, UX and Interaction Design, 2009 • Stefano Ceri et al: Designing Data-Intensive Web Applications, 2003",
                         "remarks": "none"
                    }
               },
               {
                    "chapter": "3.39",
                    "title": "Network Simulation",
                    "page": 93,
                    "type": "Elective Module",
                    "count": 2,
                    "items": {
                         "module_name": "Network Simulation / Network Simulation",
                         "workload": "180 h",
                         "credits": "6 LP",
                         "semester": "• Network Simulation : arbitrary",
                         "course_teaching_form": "Network Simulation: Lecture ( 30h / 105h / EN / SS / 20 ) Network Simulation: Tutorial ( 45h / 0h / EN / SS / 20 )",
                         "choices_in_module": "none",
                         "course_prerequiites": "none",
                         "recommended_proﬁciencies": "Network Simulation: System software and system-level programming",
                         "content": "Network Simulation: This course oﬀers the chance to get in touch with the network simulation framework OMNeT++. Simulation is one possibility (others are experiments or mathematical analysis) to evaluate the performance of systems which might even not be available in reality. After getting a basic introduction to simulation and modeling, we will study a small example project already using OMNeT++. Finally, we will work in small groups of 2-3 people on interesting research- focused projects of the areas vehicular communication and wireless sensor networks.",
                         "learning_objectives": "The learning objective is to unserstand the fundamental concepts of network simulation. Students understand these concepts and are able to apply this knowledge.",
                         "implementation_method": "Network Simulation: Lecture with practical exercises",
                         "assessment_modalities": "Oral exam (ca. 40 Minutes) The responsible lecturer announces type and duration of assessment modalities in the ﬁrst three weeks of the lecture period at latest.",
                         "partial_module_exams": "none",
                         "course_achievement": "Studienleistung: written exercises The responsible lecturer announces the requirements for course achievements in the ﬁrst three weeks of the lecture period at latest.",
                         "prerequisites_for_participation_in_module_exam": "Passing of course achievement.",
                         "prerequisites_for_obtaining_credits": "Passing of module exam.",
                         "weight_for_overall_grade": "The module is weighted with 6 credits.",
                         "person_responsible_for_the_module": "Prof. Dr. Falko Dressler",
                         "learning_material,_literature": "Network Simulation: Folien, Lehrbu¨cher, Papiere",
                         "remarks": "none"
                    }
               },
               {
                    "chapter": "3.40",
                    "title": "Networked Embedded Systems",
                    "page": 95,
                    "type": "Elective Module",
                    "count": 2,
                    "items": {
                         "module_name": "Networked Embedded Systems / Networked Embedded Systems",
                         "workload": "180 h",
                         "credits": "6 LP",
                         "semester": "• Networked Embedded Systems : arbitrary",
                         "course_teaching_form": "Networked Embedded Systems: Lecture ( 45h / 105h / EN / WS / 60 ) Networked Embedded Systems: Tutorial ( 30h / 0h / EN / WS / 20 )",
                         "choices_in_module": "none",
                         "course_prerequiites": "none",
                         "recommended_proﬁciencies": "Networked Embedded Systems: System software and system-level programming",
                         "content": "Networked Embedded Systems: The objective of this course is gain insights into the operation and programming of embedded systems. A strong focus is on wireless sensor networks. We study the fundamentals of such sensor networks. In the sopce of the exercises, we discuss selected topics in more detail.",
                         "learning_objectives": "The learning objective is to unserstand the fundamental concepts of networded embedded systems. Students understand these concepts and are able to apply this knowledge.",
                         "implementation_method": "Networked Embedded Systems: Lecture with practical exercises",
                         "assessment_modalities": "Oral exam (ca. 40 Minutes) The responsible lecturer announces type and duration of assessment modalities in the ﬁrst three weeks of the lecture period at latest.",
                         "partial_module_exams": "none",
                         "course_achievement": "Studienleistung: written exercises The responsible lecturer announces the requirements for course achievements in the ﬁrst three weeks of the lecture period at latest.",
                         "prerequisites_for_participation_in_module_exam": "Passing of course achievement.",
                         "prerequisites_for_obtaining_credits": "Passing of module exam.",
                         "weight_for_overall_grade": "The module is weighted with 6 credits.",
                         "person_responsible_for_the_module": "Prof. Dr. Falko Dressler",
                         "learning_material,_literature": "Networked Embedded Systems: Folien, Lehrbu¨cher, Papiere",
                         "remarks": "none"
                    }
               },
               {
                    "chapter": "3.41",
                    "title": "Planning and Heuristic Search",
                    "page": 97,
                    "type": "Elective Module",
                    "count": 2,
                    "items": {
                         "module_name": "Planning and Heuristic Search / Planning and Heuristic Search",
                         "workload": "180 h",
                         "credits": "6 LP",
                         "semester": "• Planen und Heuristische Suche : arbitrary",
                         "course_teaching_form": "Planning and Heuristic Search: Lecture ( 45h / 105h / EN / WS / 40 ) Planning and Heuristic Search: Tutorial ( 30h / 0h / EN / WS / 20 )",
                         "choices_in_module": "none",
                         "course_prerequiites": "none",
                         "recommended_proﬁciencies": "Planning and Heuristic Search: Basics of symbolic modeling: functions, relations, logical formulas; design and analysis of algorithms; basics of computational complexity theory: complexity classes, re- ducibility, completeness.",
                         "content": "Planning and Heuristic Search: The course ”Planning and Heuristic Search” introduces two approaches to solve knowledge-intensive tasks. In the ”Planning” part, domain tasks are represented as planning problems using e.g. state spaces or plan spaces. Several approaches to planning are discussed and analyzed. The ”Heuristic Search” part generalizes the state space concept and introduces a general framework of systematic search algorithms that are guided by heuristic information on the problem domain. As an application example, planning algorithms can be implemented deterministically using heuristic search. Theoretical results will be presented and proved in both areas.",
                         "learning_objectives": "The students are able to • name and explain relevant concepts in modeling planning tasks and search tasks, • describe the basisc steps of several planning algorithms and heuristic search algorithms, • identify and model simple tasks as planning tasks resp. search tasks, • describe approaches to compute valuable heuristcs in such tasks, • use theoretical results as guidance in selecting formalizations and algorithms.",
                         "implementation_method": "Planning and Heuristic Search: • Lecture • Tutorials • Discussions • Homework Assignments • Prototype Implementations",
                         "assessment_modalities": "Oral exam (ca. 40 Minutes) The responsible lecturer announces type and duration of assessment modalities in the ﬁrst three weeks of the lecture period at latest.",
                         "partial_module_exams": "none",
                         "course_achievement": "Studienleistung: written exercises The responsible lecturer announces the requirements for course achievements in the ﬁrst three weeks of the lecture period at latest.",
                         "prerequisites_for_participation_in_module_exam": "Passing of course achievement.",
                         "prerequisites_for_obtaining_credits": "Passing of module exam.",
                         "weight_for_overall_grade": "The module is weighted with 6 credits.",
                         "person_responsible_for_the_module": "Dr. Theodor Lettmann",
                         "learning_material,_literature": "Planen und Heuristische Suche: • Vorlesungsfolien • Lehrbu¨cher: 1.) J. Pearl: Heuristics, Addison-Wesley (1984), 2.) S.J. Russell, P. Norvig: Artiﬁcal Intelligence: A Modern Approach, Prentice Hall, 1995, 3.) S. Edelkamp, S. Schr¨odl: Heuristic Search: Theory and Applications, Elsevier, 2012, 4.) M. Ghallab, D. Nau, P. Traverso: Automated Planning, Morgan Kaufmann, 2004 • U¨ bungsaufgaben • Liste von klassischen und aktuellen Papieren, z.B. R. Ebendt, R. Drechsler: Weighted A*Search - Unifying View and Application, J. Artiﬁcial Intelligende, pp. 1310-1342, 2009 item Online Material, z.B. H. Geﬀner, B. Bonet: A Concise Introducation to Models and Methods for Automated Planning, doi: 10.2200/S00513ED1V01Y201306AIM022, 2013",
                         "remarks": "none"
                    }
               },
               {
                    "chapter": "3.42",
                    "title": "Projet Group",
                    "page": 99,
                    "type": "Mandatory Module",
                    "count": 2,
                    "items": {
                         "module_name": "Projet Group / Projet Group",
                         "workload": "600 h",
                         "credits": "20 LP",
                         "semester": "• Projektgruppe : arbitrary",
                         "course_teaching_form": "Project Group: Lecture ( 30h / 540h / EN / WS oder SS / 10 ) Project Group: Meetings, presentation of partial results ( 30h / 0 h / EN / WS oder SS / 10 )",
                         "choices_in_module": "none",
                         "course_prerequiites": "none",
                         "recommended_proﬁciencies": "Project Group: Depends on the topic.",
                         "content": "Project Group: In a Project Group a group of usually 8-16 students works together over a period of one year (two semesters) on a research topic determined by the group organizer. Project groups introduce students to current research topics that are usually related to the group organizer’s special area of interest and the team working of the project group should be a preparation for industrial practice.",
                         "learning_objectives": "In project groups, participating students gain ﬁrst-hand practical experience in working in a team and organizing a project; in doing so, they become prepared for daily work in their later professions. The students personally experience how to carry out extensive development processes in a team. Since the tasks are divided among the individual team members, the participating students become skilled in reporting their progress and research ﬁndings to the other group members.",
                         "implementation_method": "Project Group: • The number of participants is limited to 16 people. • Developing knowledge on the selected systematic approaches, methods and tools relevant to the research topic- usually done in an introductory seminar phase. • Logical assigning ”jobs” (assigning responsibilities to the individual group members). • Discovering and promoting the participants’ special individual talents, which are either already ap- parent or which can be developed throughout the project - such as through seminar presentations or appropriate job assignments. • Setting up a process-oriented personnel structure, similar to the structure of an industrial design team; delegating subtasks to smaller subgroups who report their ﬁndings. • Regular progress reports made by individuals and subgroups. • Writing a highly distributed interim report and ﬁnal report.",
                         "assessment_modalities": "Partial modul exam (100 % of module grade) The responsible lecturer announces type and duration of assessment modalities in the ﬁrst three weeks of the lecture period at latest.",
                         "partial_module_exams": "none",
                         "course_achievement": "Studienleistung: Practical work The responsible lecturer announces the requirements for course achievements in the ﬁrst three weeks of the lecture period at latest.",
                         "prerequisites_for_participation_in_module_exam": "Passing of course achievement.",
                         "prerequisites_for_obtaining_credits": "Passing of module exam.",
                         "weight_for_overall_grade": "The module is weighted with 8 credits.",
                         "person_responsible_for_the_module": "Prof. Dr. rer. nat. Johannes Bl¨omer",
                         "learning_material,_literature": "Projektgruppe: Abh¨angig vom Thema.",
                         "remarks": "none"
                    }
               },
               {
                    "chapter": "3.43",
                    "title": "Public-Key Cryptography",
                    "page": 101,
                    "type": "Elective Module",
                    "count": 2,
                    "items": {
                         "module_name": "Public-Key Cryptography / Public-Key Cryptography",
                         "workload": "180 h",
                         "credits": "6 LP",
                         "semester": "• Public-Key Cryptography : arbitrary",
                         "course_teaching_form": "Public-Key Cryptography: Lecture ( 45h / 105h / EN / WS / 50 ) Public-Key Cryptography: Tutorial ( 30h / 0h / EN / WS / 25 )",
                         "choices_in_module": "none",
                         "course_prerequiites": "none",
                         "recommended_proﬁciencies": "Public-Key Cryptography: Elementary cryptography, as usually taught in introductory courses on cryptography",
                         "content": "Public-Key Cryptography: This course covers foundational techniques for the construction and formal security analysis of public-key cryptosystems. This includes, in particular, digital signature schemes, public-key encryption schemes, identity-based encryption, and related concepts. The main focus lies on the introduction of well-established techniques that are commonly used to construct and prove security of modern cryptosystems.",
                         "learning_objectives": "Students know established techniques for the construction of provably secure public-key cryptosystems. They are able to deﬁne security requirements formally, know the established standard deﬁnitions and their limitations, and are able to formally analyze the relationships between these deﬁnitions. They are also able to apply standard proof techniques to new cryptosystems.",
                         "implementation_method": "Public-Key Cryptography: • Lectures with slides and blackboard notes • Exercises and presentation of solutions by participants",
                         "assessment_modalities": "Oral exam (ca. 40 Minutes) The responsible lecturer announces type and duration of assessment modalities in the ﬁrst three weeks of the lecture period at latest.",
                         "partial_module_exams": "none",
                         "course_achievement": "Studienleistung: written exercises The responsible lecturer announces the requirements for course achievements in the ﬁrst three weeks of the lecture period at latest.",
                         "prerequisites_for_participation_in_module_exam": "Passing of course achievement.",
                         "prerequisites_for_obtaining_credits": "Passing of module exam.",
                         "weight_for_overall_grade": "The module is weighted with 6 credits.",
                         "person_responsible_for_the_module": "Prof. Dr., Tibor Jager",
                         "learning_material,_literature": "Public-Key Cryptography: • Vorlesungsfolien • Tafelanschrieb • Originalliteratur",
                         "remarks": "none"
                    }
               },
               {
                    "chapter": "3.44",
                    "title": "Reconﬁgurable Computing",
                    "page": 103,
                    "type": "Elective Module",
                    "count": 2,
                    "items": {
                         "module_name": "Reconﬁgurable Computing / Reconﬁgurable Computing",
                         "workload": "180 h",
                         "credits": "6 LP",
                         "semester": "• Reconﬁgurable Computing : arbitrary",
                         "course_teaching_form": "Reconﬁgurable Computing: Lecture ( 30h / 105h / EN / WS / 50 ) Reconﬁgurable Computing: Tutorial ( 45h / 0h / EN / WS / 25 )",
                         "choices_in_module": "none",
                         "course_prerequiites": "none",
                         "recommended_proﬁciencies": "Reconﬁgurable Computing: Knowledge of ”Digital Design” and ”Computer Architecture” is beneﬁcial.",
                         "content": "Reconﬁgurable Computing: This lecture provides an understanding of architectures and design meth- ods for reconﬁgurable hardware systems and presents applications in the areas of high performance computing and embedded systems.",
                         "learning_objectives": "After attending the course, the students • are able to explain the architectures of reconﬁgurable hardware devices, • to name and analyze the main design methods and • to judge the suitability of reconﬁgurable hardware for diﬀerent application domains.",
                         "implementation_method": "Reconﬁgurable Computing: • Lecture with projector and board • Interactive exercises in the lecture room • Computer-based exercises with reconﬁgurable systems",
                         "assessment_modalities": "Oral exam (ca. 40 Minutes) The responsible lecturer announces type and duration of assessment modalities in the ﬁrst three weeks of the lecture period at latest.",
                         "partial_module_exams": "none",
                         "course_achievement": "Studienleistung: written exercises The responsible lecturer announces the requirements for course achievements in the ﬁrst three weeks of the lecture period at latest.",
                         "prerequisites_for_participation_in_module_exam": "Passing of course achievement.",
                         "prerequisites_for_obtaining_credits": "Passing of module exam.",
                         "weight_for_overall_grade": "The module is weighted with 6 credits.",
                         "person_responsible_for_the_module": "Prof. Dr. Marco Platzner",
                         "learning_material,_literature": "Reconﬁgurable Computing: • Vorlesungsfolien und U¨ bungsbla¨tter • Aufgabenbla¨tter und technische Dokumentation fu¨r die Rechneru¨bungen • S. Hauck and A. DeHon (editors): Reconﬁgurable Computing, Volume 1: The Theory and Practice of FPGA-Based Computation, Morgan Kaufmann, 2008 • Aktuelle Hinweise auf alternative und erga¨nzende Literatur, sowie Lehrmaterialien auf der Webseite und in den Vorlesungsfolien",
                         "remarks": "none"
                    }
               },
               {
                    "chapter": "3.45",
                    "title": "Routing and Data Management in Networks",
                    "page": 105,
                    "type": "Elective Module",
                    "count": 2,
                    "items": {
                         "module_name": "Routing and Data Management in Networks / Routing and Data Man- agement in Networks",
                         "workload": "180 h",
                         "credits": "6 LP",
                         "semester": "• Routing and Data Management in Networks : arbitrary",
                         "course_teaching_form": "Routing and Data Management in Networks: Lecture ( 45h / 105h / EN / SS / 40 ) Routing and Data Management in Networks: Tutorial ( 30h / 0h / EN / SS / 20 )",
                         "choices_in_module": "none",
                         "course_prerequiites": "none",
                         "recommended_proﬁciencies": "Routing and Data Management in Networks: Algorithm design, theoretical correctness and eﬃciency proofs, tools from combinatorics and probability theory.",
                         "content": "Routing and Data Management in Networks: Routing and data management are fundamental tasks to be solved in order to ensure eﬃcient use of large networks, e.g. the Internet, peer-to-peer systems, or wireless mobile ad-hoc networks. This lecture deals with algorithms and their analysis for routing and data management in such systems and describes, in particular, methods for dealing with their dynamics (movement of nodes, joining and exiting nodes). In particular, local, distributed algorithms, often as online algorithms, are considered.",
                         "learning_objectives": "The students get to know fundamental techniques in the area of routing and data management of large networks. They can decide in which situation which data management, scheduling, or routing algorithm is most appropriate. They can adapt algorithms to a new situation.",
                         "implementation_method": "Routing and Data Management in Networks: • Lecture with beamer and blackboard • Practice in small groups • Expected activities of the students: Solving homework exercises, contributing to the tutorials",
                         "assessment_modalities": "Oral exam (ca. 40 Minutes) The responsible lecturer announces type and duration of assessment modalities in the ﬁrst three weeks of the lecture period at latest.",
                         "partial_module_exams": "none",
                         "course_achievement": "Studienleistung: written exercises The responsible lecturer announces the requirements for course achievements in the ﬁrst three weeks of the lecture period at latest.",
                         "prerequisites_for_participation_in_module_exam": "Passing of course achievement.",
                         "prerequisites_for_obtaining_credits": "Passing of module exam.",
                         "weight_for_overall_grade": "The module is weighted with 6 credits.",
                         "person_responsible_for_the_module": "Prof. Dr. Friedhelm Meyer auf der Heide",
                         "learning_material,_literature": "Routing and Data Management in Networks: Introduction to Parallel Algorithms and Architectures: Arrays, Trees, Hypercubes, Frank Thomson Leighton, M. Kaufmann Publishers, 1992. Originalarbeiten, Skript, Foliensatz der Vorlesung, U¨ bungsbl¨atter",
                         "remarks": "none"
                    }
               },
               {
                    "chapter": "3.46",
                    "title": "Seminar I",
                    "page": 107,
                    "type": "Mandatory Module",
                    "count": 2,
                    "items": {
                         "module_name": "Seminar I / Seminar I",
                         "workload": "150 h",
                         "credits": "5 LP",
                         "semester": "• Seminar : arbitrary",
                         "course_teaching_form": "Seminar: Seminar ( 30h / 120 h / EN / WS oder SS / 15 )",
                         "choices_in_module": "Seminars from the Master Program Computer Science.",
                         "course_prerequiites": "none",
                         "recommended_proﬁciencies": "Seminar: Depends on the seminar topic.",
                         "content": "Seminar: In seminars, students work independently on an individual research topic by using background literature from various sources. They describe their research topic in a presentation followed by dis- cussion and a written report. The presentation material and the written report serve two diﬀerent purposes: Whereas the presentation material supports the lectures (held within a speciﬁc time period), the written report provides students the opportunity to acquire detailed information on the reported topic at a later date.",
                         "learning_objectives": "In seminars, students learn the techniques for independent research work on non-trivial topics and how to present these topics in a presentation and in written form. The seminar participants are encouraged to familiarize themselves with a research-oriented subﬁeld of computer science. They learn how to plan a presentation and hold it within the determined time frame (usually 45 to 60 minutes), and to prioritize the contents of the presentation. The participants experience how an audience obtains knowledge from a presentation, and how to exchange opinions and information in discussions. Seminars also teach rhetorical skills for presentations and discussions. Participating students learn how to structure a presentation according to its contents and how to use various means to illustrate complex issues. They also learn how to handle the background literature appropriately.",
                         "implementation_method": "Seminar:",
                         "assessment_modalities": "Presentation (45-60 minutes) and essay The responsible lecturer announces type and duration of assessment modalities in the ﬁrst three weeks of the lecture period at latest.",
                         "partial_module_exams": "none",
                         "course_achievement": "none",
                         "prerequisites_for_participation_in_module_exam": "none",
                         "prerequisites_for_obtaining_credits": "Passing of module exam.",
                         "weight_for_overall_grade": "The module is weighted with 5 credits.",
                         "person_responsible_for_the_module": "Prof. Dr. rer. nat. Johannes Blo¨mer",
                         "learning_material,_literature": "Seminar: Abha¨ngig vom Seminarthema.",
                         "remarks": "none"
                    }
               },
               {
                    "chapter": "3.47",
                    "title": "Seminar II",
                    "page": 109,
                    "type": "Mandatory Module",
                    "count": 2,
                    "items": {
                         "module_name": "Seminar II / Seminar II",
                         "workload": "150 h",
                         "credits": "5 LP",
                         "semester": "• Seminar : arbitrary",
                         "course_teaching_form": "Seminar: Seminar ( 30h / 120 h / EN / WS oder SS / 15 )",
                         "choices_in_module": "Seminars from the Master Program Computer Science.",
                         "course_prerequiites": "none",
                         "recommended_proﬁciencies": "Seminar: Depends on the seminar topic.",
                         "content": "Seminar: In seminars, students work independently on an individual research topic by using background literature from various sources. They describe their research topic in a presentation followed by dis- cussion and a written report. The presentation material and the written report serve two diﬀerent purposes: Whereas the presentation material supports the lectures (held within a speciﬁc time period), the written report provides students the opportunity to acquire detailed information on the reported topic at a later date.",
                         "learning_objectives": "In seminars, students learn the techniques for independent research work on non-trivial topics and how to present these topics in a presentation and in written form. The seminar participants are encouraged to familiarize themselves with a research-oriented subﬁeld of computer science. They learn how to plan a presentation and hold it within the determined time frame (usually 45 to 60 minutes), and to prioritize the contents of the presentation. The participants experience how an audience obtains knowledge from a presentation, and how to exchange opinions and information in discussions. Seminars also teach rhetorical skills for presentations and discussions. Participating students learn how to structure a presentation according to its contents and how to use various means to illustrate complex issues. They also learn how to handle the background literature appropriately.",
                         "implementation_method": "Seminar:",
                         "assessment_modalities": "Presentation (45-60 minutes) and essay The responsible lecturer announces type and duration of assessment modalities in the ﬁrst three weeks of the lecture period at latest.",
                         "partial_module_exams": "none",
                         "course_achievement": "none",
                         "prerequisites_for_participation_in_module_exam": "none",
                         "prerequisites_for_obtaining_credits": "Passing of module exam.",
                         "weight_for_overall_grade": "The module is weighted with 5 credits.",
                         "person_responsible_for_the_module": "Prof. Dr. rer. nat. Johannes Blo¨mer",
                         "learning_material,_literature": "Seminar: Abha¨ngig vom Seminarthema.",
                         "remarks": "none"
                    }
               },
               {
                    "chapter": "3.48",
                    "title": "Software Analysis",
                    "page": 111,
                    "type": "Elective Module",
                    "count": 2,
                    "items": {
                         "module_name": "Software Analysis / Software Analysis",
                         "workload": "180 h",
                         "credits": "6 LP",
                         "semester": "• Software Analysis : arbitrary",
                         "course_teaching_form": "Software Analysis: Lecture ( 45h / 105h / EN / WS oder SS / 40 ) Software Analysis: Tutorial ( 30h / 0h / EN / WS oder SS / 40 )",
                         "choices_in_module": "none",
                         "course_prerequiites": "none",
                         "recommended_proﬁciencies": "Software Analysis: Logic, imperative programming",
                         "content": "Software Analysis: The course studies techniques (mostly) statically analysing properties of programs. Such information can be valuable for optimization phases of compilers (like knowledge about live vari- ables or constant values of variables), but might also help verifying the correctness of programs, i.e., the adherence to certain safety requirements.",
                         "learning_objectives": "The students know the key principles of data ﬂow analyses and their advantage and disadvantage. They can determine when to employ a data ﬂow analysis and when a path sensitive analysis. Students can design their own analysis and know how to put them in practice. They know the principle of overapproximation.",
                         "implementation_method": "Software Analysis: Partially slides and partially board writing. All essential concepts and techniques will be repeatedly applied in examples during the tutorial.",
                         "assessment_modalities": "Oral exam (ca. 40 Minutes) The responsible lecturer announces type and duration of assessment modalities in the ﬁrst three weeks of the lecture period at latest.",
                         "partial_module_exams": "none",
                         "course_achievement": "Studienleistung: written exercises The responsible lecturer announces the requirements for course achievements in the ﬁrst three weeks of the lecture period at latest.",
                         "prerequisites_for_participation_in_module_exam": "Passing of course achievement.",
                         "prerequisites_for_obtaining_credits": "Passing of module exam.",
                         "weight_for_overall_grade": "The module is weighted with 6 credits.",
                         "person_responsible_for_the_module": "Prof. Dr. Heike Wehrheim",
                         "learning_material,_literature": "Software Analysis: Nielson, Nielson, Hankin: Principles of Program Analysis Vorlesungsfolien, U¨ bungsaufgaben",
                         "remarks": "none"
                    }
               },
               {
                    "chapter": "3.49",
                    "title": "Software Quality Assurance",
                    "page": 113,
                    "type": "Elective Module",
                    "count": 2,
                    "items": {
                         "module_name": "Software Quality Assurance / Software Quality Assurance",
                         "workload": "180 h",
                         "credits": "6 LP",
                         "semester": "• Software Quality Assurance : arbitrary",
                         "course_teaching_form": "Software Quality Assurance: Lecture ( 45h / 105h / EN / SS / 90 ) Software Quality Assurance: Tutorial ( 30h / 0h / EN / SS / 30 )",
                         "choices_in_module": "none",
                         "course_prerequiites": "none",
                         "recommended_proﬁciencies": "Software Quality Assurance: Programming, Modeling, Model-based software development",
                         "content": "Software Quality Assurance: The aim of the lecture is to cover approaches, technologies and strategies related to quality assurance for software systems. These include on the one hand constructive approaches such as design patterns, anti-patterns, domain-speciﬁc languages, model driven development, model quality analysis, and architectural styles, and on the other hand analytic approaches such as static reviewing techniques and dynamic testing techniques.. Furthermore, approaches for the improvement of the software development process and international standards like ISO 9001, 9126, CMM etc. are covered.",
                         "learning_objectives": "The students are able to explain quality characteristics of software development processes, software models as well as software systems. They have understood constructive and analytical techniques used to ensure quality properties, and they are able to apply them. They can describe standards for measuring process and product quality. They are able to understand new research approaches in the area of process and product quality.",
                         "implementation_method": "Software Quality Assurance: Partially slides and partially board writing. All essential concepts and techniques will be repeatedly applied in examples during the tutorial. In a lab part, the techniques will be employed using tools, particularly testing tools.",
                         "assessment_modalities": "Oral exam (ca. 40 Minutes) The responsible lecturer announces type and duration of assessment modalities in the ﬁrst three weeks of the lecture period at latest.",
                         "partial_module_exams": "none",
                         "course_achievement": "Studienleistung: written exercises The responsible lecturer announces the requirements for course achievements in the ﬁrst three weeks of the lecture period at latest.",
                         "prerequisites_for_participation_in_module_exam": "Passing of course achievement.",
                         "prerequisites_for_obtaining_credits": "Passing of module exam.",
                         "weight_for_overall_grade": "The module is weighted with 6 credits.",
                         "person_responsible_for_the_module": "Prof. Dr. Gregor Engels",
                         "learning_material,_literature": "Software Quality Assurance: Daniel Galin: Software Quality Assurance: From Theory to Implementa- tion, Pearson / Addison Wesley, 2004 Vorlesungsfolien, U¨ bungsaufgaben",
                         "remarks": "none"
                    }
               },
               {
                    "chapter": "3.50",
                    "title": "Type Systems for Correctness and Security",
                    "page": 115,
                    "type": "Elective Module",
                    "count": 2,
                    "items": {
                         "module_name": "Type Systems for Correctness and Security / Type Systems for Correct- ness and Security",
                         "workload": "180 h",
                         "credits": "6 LP",
                         "semester": "• Typsysteme fu¨r Korrektheit und Sicherheit : arbitrary",
                         "course_teaching_form": "Type Systems for Correctness and Security: Lecture ( 45h / 105h / EN / WS / 30 ) Type Systems for Correctness and Security: Tutorial ( 30h / 0h / EN / WS / 30 )",
                         "choices_in_module": "none",
                         "course_prerequiites": "none",
                         "recommended_proﬁciencies": "Type Systems for Correctness and Security: From the lecture “Foundations of programming languages”: Language properties, Syntactical program structures, Data types and type hierarchies, Functional pro- gramming",
                         "content": "Type Systems for Correctness and Security: Type systems in programming languages prevent illicit behavior of programs from the very start. They provide valuable feedback for programmers to prevent bugs, crashes or even security vulnerabilities. In this lecture we will study the theory, the properties and the implementation of modern type systems. We will take a pragmatic view on type systems and will develop type checkers along our way in this course to put theory into practice immediately. We will also take a closer look at type systems of well-known programming languages like Java or Scala.",
                         "learning_objectives": "The participant will be able to understand and develop the deﬁnition and implementation of type sys- tems. Acquired theoretical and practical knowledge will be discussed in the course such that participants can transfer the methods, techniques, and practices of this course in diﬀerent problem settings.",
                         "implementation_method": "Type Systems for Correctness and Security: • Lecture • Discussions • Reading • Exercises with accompanying implementation",
                         "assessment_modalities": "Oral exam (ca. 40 Minutes) The responsible lecturer announces type and duration of assessment modalities in the ﬁrst three weeks of the lecture period at latest.",
                         "partial_module_exams": "none",
                         "course_achievement": "Studienleistung: written exercises The responsible lecturer announces the requirements for course achievements in the ﬁrst three weeks of the lecture period at latest.",
                         "prerequisites_for_participation_in_module_exam": "Passing of course achievement.",
                         "prerequisites_for_obtaining_credits": "Passing of module exam.",
                         "weight_for_overall_grade": "The module is weighted with 6 credits.",
                         "person_responsible_for_the_module": "Dr. Ben Hermann",
                         "learning_material,_literature": "Typsysteme fu¨r Korrektheit und Sicherheit: • Vorlesungsfolien • U¨ bungsaufgaben Weiterhin wird folgende Literatur empfohlen: • Benjamin C. Pierce. 2002. Types and Programming Languages. The MIT Press. • Benjamin C. Pierce. 2004. Advanced Topics in Types and Programming Languages. The MIT Press.",
                         "remarks": "none"
                    }
               },
               {
                    "chapter": "3.51",
                    "title": "Usability Engineering Practice",
                    "page": 117,
                    "type": "Elective Module",
                    "count": 2,
                    "items": {
                         "module_name": "Usability Engineering Practice / Usability Engineering Practice",
                         "workload": "180 h",
                         "credits": "6 LP",
                         "semester": "• Praxis des Usability Engineering : arbitrary",
                         "course_teaching_form": "Usability Engineering Practice: Lecture ( 45h / 105h / EN / WS oder SS / 40 ) Usability Engineering Practice: Tutorial ( 30h / 0h / EN / WS oder SS / 40 )",
                         "choices_in_module": "none",
                         "course_prerequiites": "none",
                         "recommended_proﬁciencies": "Usability Engineering Practice: It is expected that the audience has attended the Bachelor class ”In- teraction Design”, as there the basic knowledge about usability methods are treated.",
                         "content": "Usability  Engineering Practice: The cTlahsser”eUtshaebibliatysicEnmgeitnheoerdisngofPurasactbiicleit”y  is a continuation of the Bachelor class ”Interaction Design”. engineering (user tests, inspection methods) have been introduced. In the class single selected and currently updated methods (such as cognite walkthrough, card sorting, value-centered design) are treated in detail and with a lot of practical exercises. In addition, the class covers aspects, concepts and methods grouped ”around” usability, by dealing with user experience, approaches such as extreme usability, aesthetics or health- or safety-related aspects.",
                         "learning_objectives": "Factual knowledge is presented about current usability methods and approaches. In addition, the students learn to apply these methods, as realisticly-sized examples are dealt with and treated practically in the exercises. In the end, the students are able to assess the usability of software systems, in a systematic, tool-supported way; also, they learn about the inherent limits of such an evaluation process.",
                         "implementation_method": "Usability Engineering Practice: The class is held as a classical lecture with beamer presentation, sup- ported by koaLA - the e-learning environment of the university. That system is used to provide the slides of the class, written homeworks, access to software used during the class and video recordings of every lecture. During the class we have interactive meetings, groupwork in several chapters, e.g. for aesthetics and value-centered design. During exercise hours the students present their solutions to the homework by showing a small presentation with slides.",
                         "assessment_modalities": "Oral exam (ca. 40 Minutes) The responsible lecturer announces type and duration of assessment modalities in the ﬁrst three weeks of the lecture period at latest.",
                         "partial_module_exams": "none",
                         "course_achievement": "Studienleistung: written exercises The responsible lecturer announces the requirements for course achievements in the ﬁrst three weeks of the lecture period at latest.",
                         "prerequisites_for_participation_in_module_exam": "Passing of course achievement.",
                         "prerequisites_for_obtaining_credits": "Passing of module exam.",
                         "weight_for_overall_grade": "The module is weighted with 6 credits.",
                         "person_responsible_for_the_module": "Prof. Dr. Gerd Szwillus",
                         "learning_material,_literature": "Praxis des Usability Engineering: • Vorlesungsfolien als PDF zum Herunterladen • Schriftliche Hausaufgaben • Diverse, wa¨hrend der Vorlesung eingesetzte Modellierungswerkzeuge • Ben Shneiderman: Designing the User Interface: Strategies for Eﬀective Human-Computer Interac- tion, 2009 • David Benyon: Designing Interactive Systems: A Comprehensive Guide to HCI, UX and Interaction Design, 2009 • Jakob Nielsen und Raluca Budiu: Mobile Usability, 2012 • Eﬃe Lai-Chong Law et al. (ed): Maturing Usability: Quality in Software, Interaction and Value, 2007",
                         "remarks": "none"
                    }
               },
               {
                    "chapter": "3.52",
                    "title": "Vehicular Networking",
                    "page": 119,
                    "type": "Elective Module",
                    "count": 2,
                    "items": {
                         "module_name": "Vehicular Networking / Vehicular Networking",
                         "workload": "180 h",
                         "credits": "6 LP",
                         "semester": "• Vehicular Networking : arbitrary",
                         "course_teaching_form": "Vehicular Networking: Lecture ( 45h / 105h / EN / SS / 40 ) Vehicular Networking: Tutorial ( 30h / 0h / EN / SS / 20 )",
                         "choices_in_module": "none",
                         "course_prerequiites": "none",
                         "recommended_proﬁciencies": "Vehicular Networking: System software and system-level programming",
                         "content": "Vehicular Networking: Today’s automotive industry is increasingly relying on computer science in product innovation. Young professionals are expected to have specialized knowledge in the ﬁelds of electronics, software and vehicular networks – both in-car networks and networks of moving cars. This lecture teaches important concepts from these domains, starting with in-car networks (from individual electronic control units, modern bus systems, system and network architectures, to driver assistance functions, security and safety). The lecture then moves to networks of moving cars (from communication technology and system architectures, to the design of advanced traﬃc information systems, security and safety). Particular emphasis is given to the relevant question of balancing users’ privacy with their safety and security.",
                         "learning_objectives": "The learning objective is to unserstand the fundamental concepts of vehicular networking. Students understand these concepts and are able to apply this knowledge.",
                         "implementation_method": "Vehicular Networking: Lecture with practical exercises",
                         "assessment_modalities": "Oral exam (ca. 40 Minutes) The responsible lecturer announces type and duration of assessment modalities in the ﬁrst three weeks of the lecture period at latest.",
                         "partial_module_exams": "none",
                         "course_achievement": "Studienleistung: written exercises The responsible lecturer announces the requirements for course achievements in the ﬁrst three weeks of the lecture period at latest.",
                         "prerequisites_for_participation_in_module_exam": "Passing of course achievement.",
                         "prerequisites_for_obtaining_credits": "Passing of module exam.",
                         "weight_for_overall_grade": "The module is weighted with 6 credits.",
                         "person_responsible_for_the_module": "Prof. Dr. Falko Dressler",
                         "learning_material,_literature": "Vehicular Networking: Folien, Lehrbu¨cher, Papiere",
                         "remarks": "none"
                    }
               },
               {
                    "chapter": "3.53",
                    "title": "VLSI Testing",
                    "page": 121,
                    "type": "Elective Module",
                    "count": 2,
                    "items": {
                         "module_name": "VLSI Testing / VLSI Testing",
                         "workload": "180 h",
                         "credits": "6 LP",
                         "semester": "• VLSI Testing : 1",
                         "course_teaching_form": "VLSI Testing: Lecture ( 30h / 120h / EN / WS / 40 ) VLSI Testing: Tutorial ( 30h / 0h / EN / WS / 20 )",
                         "choices_in_module": "none",
                         "course_prerequiites": "none",
                         "recommended_proﬁciencies": "VLSI Testing: Digital Design",
                         "content": "VLSI Testing: The course “VLSI Testing” focuses on techniques for detecting hardware defects in micro- electronic circuits. Algorithms for test data generation and test response evaluation as well as hardware structures for design for test (DFT) and on-chip test implementation (BIST) are presented.",
                         "learning_objectives": "After attending the course, the students will be able to • describe fault models, DFT techniques, and test tools, • explain and apply the underlying models and algorithms for fault simulation and test generation, • analyze systems with respect to their testability and to derive appropriate test strategies.",
                         "implementation_method": "VLSI Testing: • Lecture based on slide presentation, extensions on blackboard • Exercises in small groups based on exercise sheets with students presenting their own solutions • Hands-on exercises using various software tools",
                         "assessment_modalities": "Oral exam (ca. 40 Minutes) The responsible lecturer announces type and duration of assessment modalities in the ﬁrst three weeks of the lecture period at latest.",
                         "partial_module_exams": "none",
                         "course_achievement": "Studienleistung: written exercises The responsible lecturer announces the requirements for course achievements in the ﬁrst three weeks of the lecture period at latest.",
                         "prerequisites_for_participation_in_module_exam": "Passing of course achievement.",
                         "prerequisites_for_obtaining_credits": "Passing of module exam.",
                         "weight_for_overall_grade": "The module is weighted with 6 credits.",
                         "person_responsible_for_the_module": "Prof. Dr. Sybille Hellebrand",
                         "learning_material,_literature": "VLSI Testing: • Vorlesungsfolien • M. L. Bushnell, V. D. Agrawal, Essentials of Electronic Testing for Digital, Memory & Mixed-Signal VLSI Circuits, Boston, Dordrecht, London: Kluwer Academic Publishers, 2000 • L.-T. Wang, C.-W. Wu, X. Wen, VLSI Test Principles and Architectures: Design for Testability, Morgan Kaufmann Series in Systems on Silicon, ISBN: 0123705975 • Aktuelle Hinweise auf erga¨nzende Literatur und Lehrmaterialien im koala-Kurs",
                         "remarks": "none"
                    }
               }
          ]
     }
}